<section xml:id="graphs_implementation">
        <title>Implementation</title>
        <p>Using a map, or dictionaries in Python, it is easy to implement the adjacency list. In our implementation of the Graph abstract data type we will
            create two classes (see <xref ref="lst_vertex"/> and <xref ref="lst_graph"/>), <c>Graph</c>, which holds the master list of vertices,
            and <c>Vertex</c>, which will represent each vertex in the graph.</p>
        <p>Each <c>Vertex</c> uses a map to keep track of the vertices to which
            it is connected, and the weight of each edge. This map is called
            <c>connectedTo</c>. The listing below shows the code for the <c>Vertex</c>
            class. The constructor simply initializes the <c>id</c>,
            which will be an integer, and the <c>connectedTo</c> map. The
            <c>addNeighbor</c> method is used add a connection from this vertex to
            another. The <c>getConnections</c> method returns all of the vertices in
            the adjacency list, as represented by the <c>connectedTo</c> instance
            variable. The <c>getWeight</c> method returns the weight of the edge from
            this vertex to the vertex passed as a parameter.</p>
        <p>We use <c>operator overloading</c> so that when we print our Vertex using the <c>cout &lt;&lt;</c> function
            we get a list of its connections, instead of an error. This function must be initialized
            as a <c>friend function</c> within the class definition, but is required to be defined outside of the class. This is specific to <c>operator overloading</c> in C++.</p>
        
        <listing xml:id="lst_vertex" names="graphs_lst-vertex"><term>Listing 1</term>
        <pre>class Vertex {
    public:
        int id;
        map&lt;int, int&gt; connectedTo;

        Vertex() {
        }

        Vertex(int key) {
            id = key;
        }

        void addNeighbor(int nbr, int weight = 0) {
            connectedTo[nbr] = weight;
        }

        vector&lt;int&gt; getConnections() {
            vector&lt;int&gt; keys;
            // Use of iterator to find all keys
            for (map&lt;int, int&gt;::iterator it = connectedTo.begin();
                it != connectedTo.end();
                ++it) {
                keys.push_back(it-&gt;first);
            }
            return keys;
        }

        int getId() {
            return id;
        }

        int getWeight(int nbr) {
            return connectedTo[nbr];
        }

        friend ostream &amp;operator&lt;&lt;(ostream &amp;, Vertex &amp;);
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Vertex &amp;vert) {
    vector&lt;int&gt; connects = vert.getConnections();
    for (unsigned int i = 0; i &lt; connects.size(); i++) {
        stream &lt;&lt; "( " &lt;&lt; vert.id &lt;&lt; " , " &lt;&lt; connects[i] &lt;&lt; " ) \n";
    }

    return stream;
}</pre>
</listing>
        <p>The <c>Graph</c> class, shown in the next listing, contains a map
            that maps vertex names (int) to vertex objects (Vertex). In <xref ref="graphs_an-adjacency-list"/> this
            map object is represented by the shaded gray box. <c>Graph</c> also
            provides methods for adding vertices to a graph and connecting one
            vertex to another. The <c>getVertices</c> method returns the names of all
            of the vertices in the graph.</p>
        
        <listing xml:id="lst_graph" names="graphs_lst-graph"><term>Listing 2</term>
        <pre>class Graph {
    public:
        map&lt;int, Vertex&gt; vertList;
        int numVertices;

        Graph() {
            numVertices = 0;
        }

        Vertex addVertex(int key) {
            numVertices++;
            Vertex newVertex = Vertex(key);
            this-&gt;vertList[key] = newVertex;
            return newVertex;
        }

        Vertex *getVertex(int n) {
            for (map&lt;int, Vertex&gt;::iterator it = vertList.begin(); it != vertList.end(); ++it) {
                if (it-&gt;first == n) {
                    // Forced to use pntr due to possibility of returning NULL
                    Vertex *vpntr = &amp;vertList[n];
                    return vpntr;
                } else {
                    return NULL;
                }
            }
        }

        bool contains(int n) {
            for (map&lt;int, Vertex&gt;::iterator it = vertList.begin(); it != vertList.end(); ++it) {
                if (it-&gt;first == n) {
                    return true;
                }
            }
            return false;
        }

        void addEdge(int f, int t, int cost = 0) {
            if (!this-&gt;contains(f)) {
                cout &lt;&lt; f &lt;&lt; " was not found, adding!" &lt;&lt; endl;
                this-&gt;addVertex(f);
            }
            if (!this-&gt;contains(t)) {
                cout &lt;&lt; t &lt;&lt; " was not found, adding!" &lt;&lt; endl;
            }
            vertList[f].addNeighbor(t, cost);
        }

        vector&lt;int&gt; getVertices() {
            vector&lt;int&gt; verts;

            for (map&lt;int, Vertex&gt;::iterator it = vertList.begin(); it != vertList.end();  ++it) {
                verts.push_back(it-&gt;first);
            }
            return verts;
        }

        friend ostream &amp;operator&lt;&lt;(ostream &amp;, Graph &amp;);
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Graph &amp;grph) {
    for (unsigned int i = 0; i &lt; grph.vertList.size(); i++) {
        stream &lt;&lt; grph.vertList[i];
    }

    return stream;
}</pre>
</listing>
        <p>Using the <c>Graph</c> and <c>Vertex</c> classes just defined, the following
            Python session creates the graph in <xref ref="fig-dgsimple"/>. First we
            create six vertices numbered 0 through 5. Then we display the vertex
            dictionary. Notice that for each key 0 through 5 we have created an
            instance of a <c>Vertex</c>. Next, we add the edges that connect the
            vertices together. Finally, a nested loop verifies that each edge in the
            graph is properly stored. You should check the output of the edge list
            at the end of this session against <xref ref="fig-dgsimple"/>.</p>
        <TabNode tabname="C++" tabnode_options="{'subchapter': 'Implementation', 'chapter': 'Graphs', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="graph_implementation_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;vector&gt;
using namespace std;

class Vertex {
public:
  int id;
  map&lt;int, int&gt; connectedTo;

          //Empty constructor.
  Vertex() {
  }

          //Constructor that defines the key of the vertex.
  Vertex(int key) {
          id = key;
  }

          //Adds a neighbor to this vertex with the specified ID and weight.
  void addNeighbor(int nbr, int weight = 0) {
          connectedTo[nbr] = weight;
  }
          //Returns a vector (e.g, list) of vertices connected to this one.
  vector&lt;int&gt; getConnections() {
          vector&lt;int&gt; keys;
          // Use of iterator to find all keys
          for (map&lt;int, int&gt;::iterator it = connectedTo.begin();
                   it != connectedTo.end();
                   ++it) {
                  keys.push_back(it-&gt;first);
          }
          return keys;
  }

          //Returns the ID of this vertex.
  int getId() {
          return id;
  }

          //Returns the weight of the connection between this vertex and the specified neighbor.
  int getWeight(int nbr) {
          return connectedTo[nbr];
  }

          //Output stream overload operator for printing to the screen.
  friend ostream &amp;operator&lt;&lt;(ostream &amp;, Vertex &amp;);
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Vertex &amp;vert) {
  vector&lt;int&gt; connects = vert.getConnections();
  for (unsigned int i = 0; i &lt; connects.size(); i++) {
          stream &lt;&lt; "( " &lt;&lt; vert.id &lt;&lt; " , " &lt;&lt; connects[i] &lt;&lt; " ) \n";
  }

  return stream;
}

class Graph {
public:
  map&lt;int, Vertex&gt; vertList;
  int numVertices;

          //Empty constructor.
  Graph() {
          numVertices = 0;
  }

          //Adds the specified vertex and returns a copy of it.
  Vertex addVertex(int key) {
          numVertices++;
          Vertex newVertex = Vertex(key);
          this-&gt;vertList[key] = newVertex;
          return newVertex;
  }

          //Returns the vertex with the specified ID.
          //Will return NULl if the vertex doesn't exist.
  Vertex *getVertex(int n) {
          for (map&lt;int, Vertex&gt;::iterator it = vertList.begin();
                   it != vertList.end();
                   ++it) {
                  if (it-&gt;first == n) {
                          // Forced to use pntr due to possibility of returning NULL
                          Vertex *vpntr = &amp;vertList[n];
                          return vpntr;
                  } else {
                          return NULL;
                  }
          }
  }
          //Returns a boolean indicating if an index with the specified ID exists.
  bool contains(int n) {
          for (map&lt;int, Vertex&gt;::iterator it = vertList.begin();
                   it != vertList.end();
                   ++it) {
                  if (it-&gt;first == n) {
                          return true;
                  }
          }
          return false;
  }

          //Adds an edge between vertices F and T with a weight equivalent to cost.
  void addEdge(int f, int t, int cost = 0) {
          if (!this-&gt;contains(f)) {
                  cout &lt;&lt; f &lt;&lt; " was not found, adding!" &lt;&lt; endl;
                  this-&gt;addVertex(f);
          }
          if (!this-&gt;contains(t)) {
                  cout &lt;&lt; t &lt;&lt; " was not found, adding!" &lt;&lt; endl;
          }
          vertList[f].addNeighbor(t, cost);
  }

          //Returns a vector (e.g, list) of all vertices in this graph.
  vector&lt;int&gt; getVertices() {
          vector&lt;int&gt; verts;

          for (map&lt;int, Vertex&gt;::iterator it = vertList.begin();
                   it != vertList.end();
                   ++it) {
                  verts.push_back(it-&gt;first);
          }
          return verts;
  }

          //Overloaded Output stream operator for printing to the screen
  friend ostream &amp;operator&lt;&lt;(ostream &amp;, Graph &amp;);
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Graph &amp;grph) {
  for (unsigned int i = 0; i &lt; grph.vertList.size(); i++) {
          stream &lt;&lt; grph.vertList[i];
  }

  return stream;
}

int main() {
  Graph g;

  for (int i = 0; i &lt; 6; i++) {
          g.addVertex(i);
  }

  g.addEdge(0, 1, 5);
  g.addEdge(0, 5, 2);
  g.addEdge(1, 2, 4);
  g.addEdge(2, 3, 9);
  g.addEdge(3, 4, 7);
  g.addEdge(3, 5, 3);
  g.addEdge(4, 0, 1);
  g.addEdge(5, 4, 8);
  g.addEdge(5, 2, 1);

  cout &lt;&lt; g &lt;&lt; endl;

  return 0;
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'Implementation', 'chapter': 'Graphs', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="graph_implementation_py" interactive="activecode" language="python">
        <input>
class Vertex:
      # Contructor that specifies the key of the vertex.
  def __init__(self, key):
          self.id = key
          self.connectedTo = {}
          # Adds a neighbor with the specified weight.
  def addNeighbor(self, nbr, weight=0):
          self.connectedTo[nbr] = weight

          # Converts this vertex to a string representation.
  def __str__(self):
          return str(self.id) + ' connectedTo: ' + str(
              [x.id for x in self.connectedTo])

          # Returns the list of vertex IDs that are connected to this one.
  def getConnections(self):
          return self.connectedTo.keys()

          # Returns the ID of this vertex.
  def getId(self):
          return self.id

          # Returns the weight of this vertex in relation to the specified neighbor.
  def getWeight(self, nbr):
          return self.connectedTo[nbr]


class Graph:
          # Empty constructor.
  def __init__(self):
          self.vertList = {}
          self.numVertices = 0
          # Adds a vertex with the specified ID (key) and returns it.
  def addVertex(self, key):
          self.numVertices = self.numVertices + 1
          newVertex = Vertex(key)
          self.vertList[key] = newVertex
          return newVertex
          # Returns the vertex (or None if nonexistant) with the specified ID n.
  def getVertex(self, n):
          if n in self.vertList:
                  return self.vertList[n]
          else:
                  return None

          # Returns a boolean indicating if the specified vertex ID is in this graph.
  def __contains__(self, n):
          return n in self.vertList

          # Adds an edge between F and T with a weight of cost.
  def addEdge(self, f, t, cost=0):
          if f not in self.vertList:
                  self.addVertex(f)
          if t not in self.vertList:
                  self.addVertex(t)
          self.vertList[f].addNeighbor(self.vertList[t], cost)

          # Returns a list of all vertices in this graph.
  def getVertices(self):
          return self.vertList.keys()

          # Iteration overload (useful in python).
  def __iter__(self):
          return iter(self.vertList.values())


def main():
  g = Graph()
  for i in range(6):
          g.addVertex(i)

  g.addEdge(0, 1, 5)
  g.addEdge(0, 5, 2)
  g.addEdge(1, 2, 4)
  g.addEdge(2, 3, 9)
  g.addEdge(3, 4, 7)
  g.addEdge(3, 5, 3)
  g.addEdge(4, 0, 1)
  g.addEdge(5, 4, 8)
  g.addEdge(5, 2, 1)

  for v in g:
          for w in v.getConnections():
                  print("( %s , %s )" % (v.getId(), w.getId()))


main()
        </input>
    </program>
            </TabNode>
    </section>

