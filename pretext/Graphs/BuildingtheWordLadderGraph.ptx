<section xml:id="graphs_building-the-word-ladder-graph">
        <title>Building the Word Ladder Graph</title>
        <p>Our first problem is to figure out how to turn a large collection of
            words into a graph. What we would like is to have an edge from one word
            to another if the two words are only different by a single letter. If we
            can create such a graph, then any path from one word to another is a
            solution to the word ladder puzzle. <xref ref="fig-wordladder"/> shows a
            small graph of some words that solve the FOOL to SAGE word ladder
            problem. Notice that the graph is an undirected graph and that the edges
            are unweighted.</p>
        
        <figure align="center" xml:id="fig-wordladder">
                <caption>A Small Word Ladder Graph</caption>
                    <image source="Graphs/wordgraph.png" width="80%">
                    <description>Image of a word ladder graph showing connections between various words. The words 'fool' and 'sage' are highlighted in boxes, suggesting they are the start and end points. From 'fool', lines connect to 'foil', 'foul', 'cool', and 'pool'. From 'pool', there are connections to 'poll', 'pall', and 'pole', and 'pole' connects to 'pale' which in turn connects to 'page', 'sale', and 'sage'. Other words like 'fail', 'fall', and 'pope' are also connected in the graph. The graph demonstrates how each word can be transformed into another word by changing a single letter at a time.</description>
                    </image>
                </figure>
        <p>We could use several different approaches to create the graph we need to
            solve this problem. Let's start with the assumption that we have a list
            of words that are all the same length. As a starting point, we can
            create a vertex in the graph for every word in the list. To figure out
            how to connect the words, we could compare each word in the list with
            every other. When we compare we are looking to see how many letters are
            different. If the two words in question are different by only one
            letter, we can create an edge between them in the graph. For a small set
            of words that approach would work fine; however let's suppose we have a
            list of 5,110 words. Roughly speaking, comparing one word to every other
            word on the list is an <m>O(n^2)</m> algorithm. For 5,110 words,
            <m>n^2</m> is more than 26&#160;million comparisons.</p>
        <p>We can do much better by using the following approach. Suppose that we
            have a huge number of buckets, each of them with a four-letter word on
            the outside, except that one of the letters in the label has been
            replaced by an underscore. For example, consider
            <xref ref="fig-wordbucket"/>, we might have a bucket labeled <q>pop_.</q> As we
            process each word in our list we compare the word with each bucket,
            using the &#8216;_' as a wildcard, so both <q>pope</q> and <q>pops</q> would match
            <q>pop_.</q> Every time we find a matching bucket, we put our word in that
            bucket. Once we have all the words in the appropriate buckets we know
            that all the words in the bucket must be connected.</p>
            
        <figure align="center" xml:id="fig-wordbucket">
                <caption>Word Buckets for Words That are Different by One Letter</caption>
                    <image source="Graphs/wordbuckets.png" width="80%">
                    <description>Image illustrating word buckets for a group of words that differ by only one letter. There are four buckets, each labeled with a word pattern. The first bucket 'OPE' includes 'POPE', 'ROPE', 'NOPE', 'HOPE', 'LOPE', 'MOPE', and 'COPE'. The second bucket 'P_PE' contains 'POPE', 'PIPE', and 'PAPE'. The third bucket 'PO_E' lists 'POPE', 'POLE', 'PORE', 'POSE', and 'POKE'. The last bucket 'POP' includes 'POPE' and 'POPS'. Each bucket groups words that can be formed by changing the letter represented by the underscore.</description>
                    </image>
                </figure>
        <p>In C++, we can implement the scheme we have just described by using a
            map. The labels on the buckets we have just described are the
            keys of our map. The values stored for those keys are a vector of
            words. Once we have the map built we can create the graph. We
            start our graph by creating a vertex for each word in the graph. Then we
            create edges between all the vertices we find for words found under the
            same key in the map. <xref ref="graphs_wordbucket-cpp"/> shows the C++
            code required to build the graph.</p>

    <program xml:id="wordbucket_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

class Vertex {
public:
      string id;
      map&lt;string, float&gt; connectedTo;

      Vertex() {
      }

      Vertex(string key) {
              id = key;
      }

      void addNeighbor(string nbr, float weight = 1) {
              connectedTo[nbr] = weight;
      }

      vector&lt;string&gt; getConnections() {
              vector&lt;string&gt; keys;
              // Use of iterator to find all keys
              for (map&lt;string, float&gt;::iterator it = connectedTo.begin();
                       it != connectedTo.end();
                       ++it) {
                      keys.push_back(it-&gt;first);
              }
              return keys;
      }

      string getId() {
              return id;
      }

      float getWeight(string nbr) {
              return connectedTo[nbr];
      }

      friend ostream &amp;operator&lt;&lt;(ostream &amp;, Vertex &amp;);
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Vertex &amp;vert) {
      vector&lt;string&gt; connects = vert.getConnections();
    stream &lt;&lt; vert.id &lt;&lt; " -&gt; ";
      for (unsigned int i = 0; i &lt; connects.size(); i++) {
              stream &lt;&lt; connects[i] &lt;&lt; endl &lt;&lt; "\t";
      }

      return stream;
}

class Graph {
public:
      map&lt;string, Vertex&gt; vertList;
      int numVertices;
      bool directional;

      Graph(bool directed = true) {
              directional = directed;
              numVertices = 0;
      }

      Vertex addVertex(string key) {
              numVertices++;
              Vertex newVertex = Vertex(key);
              this-&gt;vertList[key] = newVertex;
              return newVertex;
      }

      Vertex *getVertex(string n) {
              for (map&lt;string, Vertex&gt;::iterator it = vertList.begin();
                       it != vertList.end();
                       ++it) {
                      if (it-&gt;first == n) {
                              // Forced to use pntr due to possibility of returning NULL
                              Vertex *vpntr = &amp;vertList[n];
                              return vpntr;
                      } else {
                              return NULL;
                      }
              }
      }

      bool contains(string n) {
              for (map&lt;string, Vertex&gt;::iterator it = vertList.begin();
                       it != vertList.end();
                       ++it) {
                      if (it-&gt;first == n) {
                              return true;
                      }
              }
              return false;
      }

      void addEdge(string f, string t, float cost = 1) {
              if (!this-&gt;contains(f)) {
                      this-&gt;addVertex(f);
              }
              if (!this-&gt;contains(t)) {
                      this-&gt;addVertex(t);
              }
              vertList[f].addNeighbor(t, cost);

              if (!directional) {
                      vertList[t].addNeighbor(f, cost);
              }
      }

      vector&lt;string&gt; getVertices() {
              vector&lt;string&gt; verts;

              for (map&lt;string, Vertex&gt;::iterator it = vertList.begin();
                       it != vertList.end();
                       ++it) {
                      verts.push_back(it-&gt;first);
              }
              return verts;
      }

      friend ostream &amp;operator&lt;&lt;(ostream &amp;, Graph &amp;;
};

ostream &amp;operator&lt;&lt;(ostream &amp;stream, Graph &amp;grph) {
      for (map&lt;string, Vertex&gt;::iterator it = grph.vertList.begin();
               it != grph.vertList.end();
               ++it) {
              stream &lt;&lt; grph.vertList[it-&gt;first];
        cout&lt;&lt;endl;
      }

      return stream;
}

string getBlank(string str, int index) {
      string blank = str;
      blank[index] = '_';
      return blank;
}

Graph buildGraph(vector&lt;string&gt; words) {
      Graph g(false);

      map&lt;string, vector&lt;string&gt; &gt; d;

      // Go through the words
      for (unsigned int i = 0; i &lt; words.size(); i++) {
              // Go through each letter, making it blank
              for (unsigned int j = 0; j &lt; words[i].length(); j++) {
                      string bucket = getBlank(words[i], j);
                      // Add the word to the map at the location of the blank
                      d[bucket].push_back(words[i]);
              }
      }

      for (map&lt;string, vector&lt;string&gt; &gt;::iterator iter = d.begin(); iter != d.end(); ++iter) {
              for(unsigned int i=0; i&lt;iter-&gt;second.size();i++) {
            for (unsigned int j=0; j&lt;iter-&gt;second.size();j++) {
                if (iter-&gt;second[i]!=iter-&gt;second[j]) {
                    g.addEdge(iter-&gt;second[i],iter-&gt;second[j]);
                }
            }
        }
      }

    return g;
}

int main() {
    // Vector Initialized with an array
    string arr[] = {"fool","cool","pool","poll","pole","pall","fall","fail","foil","foul","pope","pale","sale","sage","page"};
    vector&lt;string&gt; words(arr,arr+(sizeof(arr)/sizeof(arr[0])));

      Graph g = buildGraph(words);

      cout &lt;&lt; g &lt;&lt; endl;

      return 0;
}
        </input>
    </program>
        <p>Since this is our first real-world graph problem, you might be wondering
            how sparse is the graph? The list of four-letter words we have for this
            problem is 5,110 words long. If we were to use an adjacency matrix, the
            matrix would have 5,110 * 5,110 = 26,112,100 cells. The graph
            constructed by the <c>buildGraph</c> function has exactly 53,286 edges, so
            the matrix would have only 0.20% of the cells filled! That is a very
            sparse matrix indeed.</p>
    </section>

