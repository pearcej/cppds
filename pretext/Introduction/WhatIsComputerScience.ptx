<section xml:id="introduction_what-is-computer-science">
        <title>What Is Computer Science?</title>
        <idx>computer science</idx>
        <p>Computer science can be considered difficult to define. This is probably due to
            the unfortunate use of the word <q>computer</q> in the name. As you are
            perhaps aware, computer science is not simply the study of computers.
            Although computers play an important supporting role as a tool in the
            discipline, they are just that&#8211;tools.</p>
        <p>
            <idx>algorithm</idx>
            Computer science is the study of problems, problem-solving, and the
            solutions that come out of the problem-solving process. Given a problem,
            a computer scientist's goal is to develop an <term>algorithm</term>, a
            step-by-step list of instructions for solving any instance of the
            problem that might arise. Algorithms are finite processes that if
            followed will solve the problem. Algorithms are solutions.
        </p>
        <p>Computer science can be thought of as the study of algorithms.
            Some problems do not have solutions at all.
            Other problems do have solutions, but these solutions cannot be
            executed in a reasonable amount of time.
            Although proving these statements is beyond the scope of this
            text, the fact that some problems cannot be solved and/or cannot be solved
            in the amount of time available is important for
            those who study computer science. We can fully define computer science,
            then, by including these types of problems and stating that computer
            science is the study of solutions to problems as well as the study of
            problems without fast solutions and including the study of problems without any solutions at all.</p>
        <p> <idx>computable</idx>
            Hence, it is very common to include the word <term>computable</term> when
            describing problems and solutions. We say that a problem is computable
            if an algorithm exists for solving it. An alternative definition for
            computer science, then, is to say that computer science is the study of
            problems that are and that are not computable, the study of the
            existence and the nonexistence of algorithms as well as the analysis of the
            relative speed of those algorithms. Here, you will note
            that the word <q>computer</q> did not come up at all. Solutions are and should be
            considered independent from the machine.</p>
        <p><idx>abstraction</idx>
            Computer science, as it pertains to the problem-solving process itself,
            is also the study of <term>abstraction</term>. Abstraction allows us to view the
            problem and solution in such a way as to separate the so-called logical
            and physical perspectives. The basic idea is familiar to us in a common
            example.</p>
        <p>Consider the automobile that you may have driven to school or work
            today. As a driver, a user of the car, you have certain interactions
            that take place in order to utilize the car for its intended purpose.
            You get in, insert the key, start the car, shift, brake, accelerate, and
            steer in order to drive. From an abstraction point of view, we can say
            that you are seeing the logical perspective of the automobile. You are
            using the functions provided by the car designers for the purpose of
            transporting you from one location to another. These functions are
            sometimes also referred to as the <term>interface</term>.</p>
        <p>On the other hand, the mechanic who must repair your automobile takes a
            very different point of view. She not only knows how to drive but must
            know all of the details necessary to carry out all the functions that we
            take for granted. She needs to understand how the engine works, how the
            transmission shifts gears, how temperature is controlled, and so on.
            This is known as the physical perspective, the details that take place
            <q>under the hood.</q></p>
        <p>The same thing happens when we use computers. Most people use computers
            to write documents, send and receive email, surf the web, play music,
            store images, and play games without any knowledge of the details that
            take place to allow those types of applications to work. They view
            computers from a logical or user perspective. Computer scientists,
            programmers, technology support staff, and system administrators take a
            very different view of the computer. They must know the details of how
            operating systems work, how network protocols are configured, and how to
            code various scripts that control function. They must be able to control
            the low-level details that a user simply assumes.</p>
        <p>The common point for both of these examples is that the user of the
            abstraction, sometimes also called the client, does not need to know the
            details as long as the user is aware of the way the interface works.
            This interface is the way we as users communicate with the underlying
            complexities of the implementation. As another example of abstraction,
            consider the C++ <c>cmath</c> module. Once we import the module, we can
            perform computations such as</p>
        <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'WhatIsComputerScience', 'chapter': 'Introduction', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="cPlusPlus" interactive="activecode" language="cpp">
        <input>
//Outputs the square root of a given number.
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;

int main() {
    cout &lt;&lt; sqrt(16);
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'WhatIsComputerScience', 'chapter': 'Introduction', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="Python" interactive="activecode" language="python">
        <input>
#Outputs the square root of a given number.
import math

print(math.sqrt(16))
        </input>
    </program>
            </TabNode></exercise>
        <p> <idx>procedural abstraction</idx>
            This is an example of <term>procedural abstraction</term>. We do not necessarily
            know how the square root is being calculated, but we know what the
            function is called and how to use it. If we perform the import
            correctly, we can assume that the library is correct and any function
            using it will provide us with the correct results.
            We know that someone implemented a solution to the
            square root problem and we only need to know how to use it. This is
            sometimes referred to as a <q>black box</q> view of a process. We simply
            describe the interface: the name of the function, what is needed (the
            parameters), and what will be returned. The details are hidden inside
            (see <xref ref="fig-procabstraction"/>).</p>
        
        <figure align="center" xml:id="fig-procabstraction"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Procedural Abstraction</caption><image source="Introduction/Figures/blackbox.png" width="50%"/></figure>
    </section>

