<section xml:id="introduction_defining-c-functions">
        <title>Defining C++ Functions</title>
        <p>In general, we can hide the details of any computation by defining
            a function. A function definition requires a name, a group of
            parameters, a return type, and a body. It may either return a variable, value, or nothing (specified by the keyword void). For
            example, the simple function defined below returns an integer which is the double of the
            value you pass into it.</p>
        
        <blockquote>

    <program xml:id="timesTwo" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

int timesTwo(int num) {
    /* return type int which indicates
       that an integer is being returned */
    return num*2;
}

int main() {
    /* return type int which indicates that
       an integer is being returned */
    cout&lt;&lt;timesTwo(5)&lt;&lt;endl;

    return 0;
}
        </input>
    </program>
        </blockquote>
        <p>The syntax for this function definition includes the name, <c>timesTwo</c>,
            and a parenthesized list of formal parameters and their types. For this function an <c>int</c> named <c>num</c>
            is the only formal parameter, which suggests that <c>timesTwo</c> needs only
            one piece of data to do its work. The details, hidden <q>inside the box,</q>
            simply compute the result of <c>num*2</c> and return it. We can invoke or
            call the <c>timesTwo</c> function by asking the C++ to
            evaluate it, passing an actual parameter value, in this case, <c>3</c>.
            Note that the call to <c>timesTwo</c> returns an integer that can in turn be
            passed to another invocation.</p>
        <p>Let us look at a similar function.</p>
        
        <blockquote>

    <program xml:id="timesTwoVoid" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

void timesTwoVoid(int num) {
  /* return type void which indicates
     that an nothing is being returned */
  cout&lt;&lt; num*2&lt;&lt;endl;
}

int main() {
    /* return type int which indicates that
       an integer is being returned */
    timesTwoVoid(5);

    return 0;
}
        </input>
    </program>
        </blockquote>
        <p><c>timesTwoVoid</c> behave very similarly to <c>timesTwo</c>. However, there is one key
            difference between them. Instead of the <c>int</c> in <c>timesTwo</c>, <c>timesTwoVoid</c> has a
            <c>void</c> in front of its function definition. Unlike <c>timesTwo</c>, <c>timesTwoVoid</c> is a non-fruitful
            function meaning it does not return a value even though it can still print something out.</p>
        <p>We could go a step further and implement our own square root function by using a well-known
            technique called <q>Newton's Method.</q> Newton's Method for approximating
            square roots performs an iterative computation that converges on the
            correct value. The equation
            <math>newguess = \frac {1}{2} * (oldguess + \frac {n}{oldguess})</math>
            takes a value <math>n</math> and repeatedly guesses the square root by
            making each <math>newguess</math> the <math>oldguess</math> in the subsequent
            iteration. The initial guess used here is <math>\frac {n}{2}</math>.
            <xref ref="lst-root"/> shows a function definition that accepts a value
            <math>n</math> and returns the square root of <math>n</math> after making 20
            guesses. Again, the details of Newton's Method are hidden inside the
            function definition and the user does not have to know anything about
            the implementation to use the function for its intended purpose.
            <xref ref="lst-root"/> also shows the use of the // characters as a comment
            marker. Any characters that follow the // on a line are ignored.</p>
        
        <p xml:id="introduction_lst-root" names="lst_root"><term>Listing 1</term></p>

    <program xml:id="newtonsmethod" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

double squareroot(double n) { /*return type int which indicates
                                that a decimal is being returned*/
      double root = n / 2;

      for (int i = 0; i &lt; 20; i++) {
                root = (.5) * (root + (n / root));
      }

      return root;
}

int main() {
      cout &lt;&lt; squareroot(9) &lt;&lt; endl;
      cout &lt;&lt; squareroot(4563) &lt;&lt; endl;

      return 0;
}
        </input>
    </program>
        <note>
            <title>Self Check</title>
            <p>Take a look at the code below:</p>
            <pre>#include &lt;iostream&gt;
using namespace std;

void dogWalk(int steps){

    for (int step = 0; step &lt; steps; step++){
        cout &lt;&lt; "dog walked "&lt;&lt; step &lt;&lt; " steps!"&lt;&lt; endl;

    }

}

int main() {

    dogWalk(11);

    return 0;

}</pre>
        </note>

    <exercise label="dog_walker">
        <statement>

        <p>Q-4: What is the correct return type of the function above <term>int main()</term>?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>void</p>
                </statement>
                <feedback>
                    <p>Correct, nothing is returned!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>int</p>
                </statement>
                <feedback>
                    <p>Not quite, check the value preceding the name of the function!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>dog</p>
                </statement>
                <feedback>
                    <p>Not quite, dog is not even a data type!</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>dogWalk</p>
                </statement>
                <feedback>
                    <p>Not quite, that is the name of the function itself!</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        <subsection xml:id="introduction_parameter-passing-by-value-versus-by-reference">
            <title>Parameter Passing: by Value versus by Reference</title>
            <p><idx>pass-by-value</idx>In all of the functions we have written thus far, we have used a function calling
                mechanism called <term>pass-by-value</term>.
                Calling a function by value involves copying the contents of the arguments
                into the memory locations of the corresponding formal parameters.
                If the function changes
                the values of the parameters, the original contents in the memory referenced
                by the arguments of the calling function do not change.</p>
            <p>Consider the following two function definitions:</p>
            <pre>void functionExample( int inputVar ) { /*return type void which indicates that
                                         nothing is being returned*/
    int nextVar = inputVar * 2;
    inputVar = 4;

    cout &lt;&lt; "nextVar = " &lt;&lt; nextVar &lt;&lt; " inputVar = " &lt;&lt; inputVar;
}

void callingFunction() { /*return type int which indicates
                             that nothing is being returned*/
    int myVar = 10;

    functionExample( myVar );
    cout &lt;&lt; "myVar = " &lt;&lt; myVar;
}</pre>
            <p>When the function <c>callingFunction()</c> executes, it calls <c>functionExample(...)</c>
                with the variable <em>myVar</em> having the value 10. Within <c>functionExample(...)</c>,
                the value of 10 is copied from <em>myVar</em> to the formal parameter <em>inputVar</em>,
                so the value of <em>nextVar</em> is 10x2, or 20. The next statement changes the contents of <em>inputVar</em> to 4,
                so the <c>cout</c> statement within this function produces the output:</p>
            <pre>nextVar = 20 inputVar = 4</pre>
            <p>Notice what happens when <c>functionExample(...)</c> ends and execution returns to <c>callingFunction()</c>.
                The contents of <em>myVar</em> is <term>still the same</term>, as the location for <em>myVar</em> differs from where <em>inputVar</em>
                is stored. Thus, <em>myVar</em> still has the value 10, and the <c>cout</c> statement after the function call will
                produce the output:</p>
            <pre>myVar = 10</pre>
            <p>In other words, any changes to the variables are local to the function, which is exactly what we want.</p>
            <transition/>
            <p>However, there is a problem.</p>
            <p><idx>pass-by-reference</idx>We have seen examples of C++ functions that return no value or a single value.
                How about when we want the function to return <term>more</term> than one value?
                We need another function calling mechanism called <term>pass-by-reference</term>.
                When using this mechanism, the actual location in memory referenced by the arguments are
                sent rather than the values in that location.
                To let the compiler know that you intend to use pass by reference,
                you attach an <q>&amp;</q> to the end of the type name in the formal parameter list in the function
                declaration and header. When you do this, any changes to the values of the parameters will
                change the value of the arguments as well.</p>
            <p>An example of a function where this is useful is a function that takes two values
                as input and swaps their order. Consider the following program fragment of a function
                called <c>swap_values(...)</c> that swaps its two inputs and the <c>main()</c> function
                that calls <c>swap_values(...)</c>.</p>
            
            <blockquote>

    <program xml:id="activepassrefcpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
using namespace std;

// swap_values() function definition
// Interchanges the values located by variable1 and variable2.

// Notice that this function does not return anything!
void swap_values(int &amp;variable1, int &amp;variable2) {
    int temp;           // temporary storage for swap

    temp = variable1;
    variable1 = variable2;
    variable2 = temp;
}

int main( ) {
    int first_num, second_num;
    first_num = 7;
    second_num = 8;

    cout &lt;&lt; "Two numbers before swap function: 1) " &lt;&lt; first_num &lt;&lt; " 2) " &lt;&lt; second_num &lt;&lt; endl;
    swap_values(first_num, second_num);
    cout &lt;&lt; "The numbers after swap function: 1) " &lt;&lt; first_num &lt;&lt; " 2) " &lt;&lt; second_num;

    return 0;
}
        </input>
    </program>
            </blockquote>
            <p>For this program <xref ref="lst-swap-inputs"/> to reverse the order of the integers the users types in, the function <c>swap_values(...)</c> must be able to change the values of the arguments. Try removing one or both of the <q>&amp;</q> &#8216;s in this code to see what happens.</p>
        </subsection>
        <transition/>
        <subsection xml:id="introduction_arrays-as-parameters-in-functions">
            <title>Arrays as Parameters in Functions</title>
            <p><idx>array parameters</idx>Functions can be used with <term>array parameters</term> to maintain a structured design.
                However, a formal parameter for an array is neither a call-by-value nor a call-by-reference,
                but a new type of parameter pass called an array parameter.
                In a function definition, an array parameter looks like a pass-by-value parameter
                because there is no ampersand symbol (&amp;), but the variable name is instead followed
                by a set of square brackets ([ and ]).</p>
            <p>The following example function returns the average hours worked over the array of
                integers (note that we need to also pass in the number of elements in that array
                because the array parameter <em>list[]</em> does not include that information):</p>
            <pre>double average( int list[], int length ) {
     // It is correct syntax to omit the array length on the array itself.
    double total = 0;
     //return type double which indicates that a decimal is being returned
    int count;
    for( count = 0; count &lt; length; count++ ) {
        total += double(list[count]);
        };
    return (total / length);
}</pre>
            <p>Array parameters look like pass by value, but they are effectively similar to pass by reference parameters. When they execute, the functions with these parameters do not make private copies of the arrays. Instead, the reference is passed to reduce the impact on memory. Arrays can therefore always be permanently changed when passed as arguments to functions.</p>
            <p>After a call to the following function, each element in the third array argument is equal to the sum of the corresponding two elements in the first and second arguments:</p>
            <pre>void add_lists( int first[], int second[], int total[], int length ) {
    //return type void which indicates that nothing is returned
    int count;
    for( count = 0; count &lt; length; count++ ) {
        total[count] = first[count] + second[count];
};}</pre>
            <p>Upon further examination, we can see that the first two arrays do not change values. To prevent ourselves from accidentally modifying any of these arrays, we can add the modifier <c>const</c> in the function head:</p>
            <pre>void add_lists( const int first[], const int second[], int total[], int length ) {
    //return type void which indicates that nothing is returned
    int count;
    for( count = 0; count &lt; length; count++ ) {
        total[count] = first[count] + second[count];
};}</pre>
            <p>These changes would ensure that the compiler will then not accept any statements within the function's definition that potentially modify the elements of the arrays <em>first</em> or <em>second</em>.</p>
        </subsection>
        <subsection xml:id="introduction_function-overloading">
            <title>Function Overloading</title>
            <p><idx>function overloading</idx><term>Function overloading</term> is the ability to create multiple functions with identical names
                but different implementations.
                Not all languages support function overloading. Python does not, for example,
                but an optional parameter can often be used to accomplish the same task.</p>
            <p>In C++ programming, two or more functions can have the same
                name when they can be distinguished by the parameters.
                Hence, C++  allows function overloading when either the data types of the parameters differ
                or the number of parameters differ.</p>
            <p>Overloading is a nice feature of the C++ language.</p>
            <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'DefiningFunctions', 'chapter': 'Introduction', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="foverload_cpp" interactive="activecode" language="cpp">
        <input>
//showcases function overloading in C++
#include &lt;iostream&gt;
using namespace std;

void myfunct(int n) {
     cout &lt;&lt; "1 parameter: " &lt;&lt; n &lt;&lt;endl;
}

void myfunct(int n, int m) {
     cout &lt;&lt; "2 parameters: " &lt;&lt; n;
     cout &lt;&lt; " and " &lt;&lt; m &lt;&lt;endl;
}

int main() {

    myfunct(4);
    myfunct(5, 6);
    myfunct(100);

    return 0;
}
        </input>
    </program>
                </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'DefiningFunctions', 'chapter': 'Introduction', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="foverload_py" interactive="activecode" language="python">
        <input>
#showcases function overloading in Python
def myfunct(n, m=None):
    if m is None:
        print("1 parameter: " + str(n))
    else:
        print("2 parameters: " + str(n), end="")
        print(" and ", str(m))

def main():
    myfunct(4);
    myfunct(5, 6);
    myfunct(100);

main()
        </input>
    </program>
                </TabNode></exercise>

    <exercise label="foverloading">
        <statement>

            <p>Q-8: What are benefits of function overloading?</p>

        </statement>
<choices>

            <choice correct="yes">
                <statement>
                    <p>Helps keep consintency in the way your functions are named across your program.</p>
                </statement>
                <feedback>
                    <p>Take a look at the other answers as well...</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Functions that do similar tasks differ based on parameters rather than by name.</p>
                </statement>
                <feedback>
                    <p>Take a look at the other answers as well...</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>A function in essence can fulfill multiple tasks depending on the parameters.</p>
                </statement>
                <feedback>
                    <p>Take a look at the other answers as well...</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Removes the limit on how many parameters can be written or passed.</p>
                </statement>
                <feedback>
                    <p>Wrong! function overloading has nothing to do with removing the limit of parameters.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            <note>
                <title>Self Check</title>
                <p>Here's a self check that really covers everything so far.  You may have
                    heard of the infinite monkey theorem?  The theorem states that a monkey
                    hitting keys at random on a typewriter keyboard for an infinite amount of
                    time will almost surely type a given text, such as the complete works of
                    William Shakespeare.  Well, suppose we replace a monkey with a C++ function.
                    How long do you think it would take for a C++ function to generate just one
                    sentence of Shakespeare?  The sentence we'll shoot for is:  <q>methinks it is
                    like a weasel</q></p>
                <p>You're not going to want to run this one in the browser, so fire up your favorite
                    C++ IDE.  The way we'll simulate this is to write a function that generates a string
                    that is 28 characters long by choosing random letters from the 26 letters in the
                    alphabet plus the space.  We'll write another function that will score each
                    generated string by comparing the randomly generated string to the goal.
                    Hint: You will need to import the &lt;random&gt; library for this.</p>
                <p>A third function will repeatedly call generate and score, then if 100% of
                    the letters are correct we are done.  If the letters are not correct then
                    we will generate a whole new string. To make it easier to follow your program's
                    progress this third function should print out the best string generated so far
                    and its score every 1000 tries.</p>
            </note>
            <note>
                <title>Self Check Challenge</title>
                <p>See if you can improve upon the program in the self check by keeping letters
                    that are correct and only modifying one character in the best string so far.
                    This is a type of algorithm in the class of &#8216;hill climbing' algorithms, that
                    is we only keep the result if it is better than the previous one.</p>
            </note>
        </subsection>
    </section>

