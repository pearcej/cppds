<section xml:id="linear-basic_simple-balanced-parentheses">
        <title>Simple Balanced Parentheses</title>
        <p>We now turn our attention to using stacks to solve real computer science
            problems. You have no doubt written arithmetic expressions such as</p>
        <p><m>(5+6)*(7+8)/(4+3)</m></p>
        <p>where parentheses are used to order the performance of operations. You
            may also have some experience programming in a language such as Lisp or Scheme
            with constructs like:</p>
        <pre>(defun square(n)
     (* n n))</pre>
        <p>This defines a function called <c>square</c> that will return the square of
            its argument <c>n</c>. Scheme and Lisp are both notorious for using lots and lots of
            parentheses.</p>
        <p>
            In both of these examples, parentheses must appear in a balanced
            fashion. "Balanced parentheses" means that each opening symbol has a
            corresponding closing symbol and the pairs of parentheses are properly
            nested. Consider the following correctly balanced strings of
            parentheses:</p>
        <pre>(()()()())

(((())))

(()((())()))</pre>
        <p>Compare those with the following, which are not balanced:</p>
        <pre>((((((())

()))

(()()(()</pre>
        <p>The ability to differentiate between parentheses that are correctly
            balanced and those that are unbalanced is an important part of
            recognizing many programming language structures.</p>
        <p>The challenge then is to write an algorithm that will read a string of
            parentheses from left to right and decide whether the symbols are
            balanced. To solve this problem we need to make an important
            observation. As you process symbols from left to right, the most recent
            opening parenthesis must match the next closing symbol (see
            <xref ref="fig-parmatch"/>). Also, the first opening symbol processed may have to
            wait until the very last symbol for its match. Closing symbols match
            opening symbols in the reverse order of their appearance; they match
            from the inside out. This is a clue that stacks can be used to solve the
            problem.</p>
        
        <figure align="center" xml:id="fig-parmatch"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Matching Parentheses</caption><image source="LinearBasic/Figures/simpleparcheck.png" width="50%"/></figure>
        <p>Once you agree that a stack is the appropriate data structure for
            keeping the parentheses, the statement of the algorithm is
            straightforward. Starting with an empty stack, process the parenthesis
            strings from left to right. If a symbol is an opening parenthesis, push
            it on the stack as a signal that a corresponding closing symbol needs to
            appear later. If, on the other hand, a symbol is a closing parenthesis,
            pop the stack. As long as it is possible to pop the stack to match every
            closing symbol, the parentheses remain balanced. If at any time there is
            no opening symbol on the stack to match a closing symbol, the string is
            not balanced properly. At the end of the string, when all symbols have
            been processed, the stack should be empty. The C++ and Python code to implement
            this algorithm is shown in <xref ref="lst-parcheck1"/>.</p>
        
        <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'SimpleBalancedParentheses', 'chapter': 'LinearBasic', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="parcheck1_cpp" interactive="activecode" language="cpp">
        <input>
//simple program that checks for missing parantheses
#include &lt;iostream&gt;
#include &lt;stack&gt;
#include &lt;string&gt;

using namespace std;
// returns whether the parentheses in the input are balanced
bool parChecker(string symbolString) {
    stack&lt;string&gt; s;
    bool balanced = true;
    int index = 0;
    int str_len = symbolString.length();

    while (index &lt; str_len &amp;&amp; balanced) {
              string symbol;
              symbol = symbolString[index];
              if (symbol == "(") {
                  s.push(symbol); //pushes the open parentheses to the stack.
              } else {
                  if (s.empty()) { //if there is no open parentheses in the stack,
                                   //the closing parentheses just found makes the string unbalanced.
                        balanced = false;
                  } else { //if there is an open parentheses in the stack,
                           //the closing parentheses just found has a matching open parentheses.
                       s.pop();
                  }
              }
    index = index + 1;
    }

    if (balanced &amp;&amp; s.empty()) { //if the string is balanced and there are no
                                 //remaining open parentheses.
        return true;
    } else {
        return false;
    }
}

int main() {
    cout &lt;&lt; parChecker("((()))") &lt;&lt; endl;
    cout &lt;&lt; parChecker("(()") &lt;&lt; endl;
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'SimpleBalancedParentheses', 'chapter': 'LinearBasic', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="parcheck1_py" interactive="activecode" language="python">
        <input>
#Program that detects if a set of parentheses is complete.

#simple program that checks for missing parantheses
from pythonds.basic.stack import Stack

#returns whether the parentheses in the input are balanced
def parChecker(symbolString):
    s = Stack()
    balanced = True
    index = 0
    while index &lt; len(symbolString) and balanced:
        symbol = symbolString[index]
        if symbol == "(":
            s.push(symbol) #pushes the open parentheses to the stack.
        else:
            if s.isEmpty(): #if there is no open parentheses in the stack,
                            #the closing parentheses just found makes the string unbalanced.
                balanced = False
            else: #if there is an open parentheses in the stack, the
                  #closing parentheses just found has a matching open parentheses.
                s.pop()

        index = index + 1

    if balanced and s.isEmpty(): #if the string is balanced and there are no
                                 #remaining open parentheses.
        return True
    else:
        return False

def main():

    print(parChecker('((()))'))
    print(parChecker('(()'))

main()
        </input>
    </program>
            </TabNode></exercise>
        <p>This function, <c>parChecker</c>, assumes that a <c>Stack</c> class is
            available and returns a Boolean result as to whether the string of
            parentheses is balanced. Note that the Boolean variable <c>balanced</c> is
            initialized to <title_reference>true`</title_reference> as there is no reason to assume otherwise at the
            start. If the current symbol is <c>(</c>, then it is pushed on the stack
            (lines 15-16). Note also in line 22 that <c>pop</c> simply removes a symbol
            from the stack. The returned value is not used since we know it must be
            an opening symbol seen earlier. At the end (lines 28-31), as long as the
            expression is balanced and the stack has been completely cleaned off,
            the string represents a correctly balanced sequence of parentheses.</p>
    </section>

