<section xml:id="linear-basic_using-a-deque-in-c">
        <title>Using a Deque in C++</title>
        <p>As we have done in previous sections, we will use the Standard Template Library (STL)
            of C++ to use a Deque. Again, the Deque library from STL
            will provide a very nice set of methods upon which to build the details
            of the deque. Our code (<xref ref="lst-dequecode"/>) will assume that
            the front of the deque is at position 0 in the array.</p>
        
        <TabNode tabname="C++" tabnode_options="{'subchapter': 'ImplementingaDequeCpp', 'chapter': 'LinearBasic', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="dequecode_cpp" interactive="activecode" language="cpp">
        <input>
//Example code of a deque.

#include &lt;iostream&gt;
#include &lt;deque&gt;
#include &lt;string&gt;

using namespace std;

int main() {
    deque&lt;string&gt; d;
    cout &lt;&lt; "Deque Empty? " &lt;&lt; d.empty() &lt;&lt; endl;
    d.push_back("Zebra");
    cout &lt;&lt; "Deque Empty? " &lt;&lt; d.empty() &lt;&lt; endl;

    d.push_front("Turtle"); //pushes to the front of the deque.
    d.push_front("Panda");
    d.push_back("Catfish"); //pushes to the back of the deque.
    d.push_back("Giraffe");

    cout &lt;&lt; "Deque Size: " &lt;&lt; d.size() &lt;&lt; endl;
    cout &lt;&lt; "Item at the front: " &lt;&lt; d.front() &lt;&lt; endl;
    cout &lt;&lt; "Item at the back: " &lt;&lt; d.back() &lt;&lt; endl;

    cout &lt;&lt; endl &lt;&lt; "Items in the Deque: " &lt;&lt; endl;
    int dsize = d.size();
    for(int i = 0; i &lt; dsize; i++){
        //prints each item in the deque.
        cout &lt;&lt; d.at(i) &lt;&lt; " ";
    }

    cout &lt;&lt; endl;

    d.pop_back();
    d.pop_front();

    cout &lt;&lt; endl &lt;&lt; "Item at the front: " &lt;&lt; d.front() &lt;&lt; endl;
    cout &lt;&lt; "Itm at the back: " &lt;&lt; d.back() &lt;&lt; endl;
    cout &lt;&lt; "Deque Size: " &lt;&lt; d.size() &lt;&lt; endl;

    cout &lt;&lt; endl &lt;&lt; "Items in the Deque: " &lt;&lt; endl;
    int dsize2 = d.size();
    for(int i = 0; i &lt; dsize2; i++){
        //prints each item in the deque.
        cout &lt;&lt; d.at(i) &lt;&lt; " ";

    return 0;
    }
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'ImplementingaDequeCpp', 'chapter': 'LinearBasic', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="dequecode_py" interactive="activecode" language="python">
        <input>
#Example code of a deque.

class Deque:
    def __init__(self):
        self.items = []

    def empty(self):
        return self.items == []

    def push_back(self, item):
        self.items.append(item)

    def push_front(self, item):
        self.items.insert(0,item)

    def pop_back(self):
        self.items.pop()

    def pop_front(self):
        self.items.pop(0)

    def back(self):
        return self.items[-1]

    def front(self):
        return self.items[0]

    def size(self):
        return len(self.items)

    def at(self, index):
        return self.items[index]

def main():
    d = Deque()

    print("Deque Empty? ", d.empty())
    d.push_back("Zebra")
    print("Deque Empty? ", d.empty())

    d.push_front("Turtle") #pushes to the front of the deque.
    d.push_front("Panda")
    d.push_back("Catfish") #pushes to the back of the deque.
    d.push_back("Giraffe")

    print("Deque Size: ", d.size())
    print("Item at the front: ", d.front())
    print("Item at the back: ", d.back())

    print("\n")
    print("Items in the Deque: ")
    for i in range(d.size()):
        #prints each item in the deque.
        print(d.at(i), end=" ")
    print("\n")

    d.pop_back()
    d.pop_front()

    print("Item at the front: ", d.front())
    print("Item at the back: ", d.back())
    print("Deque Size: ", d.size())

    print("\n")
    print("Items in the Deque: ")
    for i in range(d.size()):
        #prints each item in the deque.
        print(d.at(i), end=" ")
    print("\n")
main()
        </input>
    </program>
            </TabNode>
        <p>You can see many similarities to C++ code already used for
            stacks and queues. You are also likely to observe that in this
            implementation adding and removing items from the back is O(1) whereas
            adding and removing from the front is O(n). This is to be expected given
            the common operations that appear for adding and removing items. Again,
            the important thing is to be certain that we know where the front and
            rear are assigned in the implementation.</p>
            <p>
            
            </p>
    </section>

