<section xml:id="recursion_tower-of-hanoi">
        <title>Tower of Hanoi</title>
        <p>The Tower of Hanoi puzzle was invented by the French mathematician
            Edouard Lucas in 1883. He was inspired by a legend that tells of a Hindu
            temple where the puzzle was presented to young priests. At the beginning
            of time, the priests were given three poles and a stack of 64 gold
            disks, each disk a little smaller than the one beneath it. Their
            assignment was to transfer all 64 disks from one of the three poles to
            another, with two important constraints. They could only move one disk
            at a time, and they could never place a larger disk on top of a smaller
            one. The priests worked very efficiently, day and night, moving one disk
            every second. When they finished their work, the legend said, the temple
            would crumble into dust and the world would vanish.</p>
        <p>Although the legend is interesting, you need not worry about the world
            ending any time soon. The number of moves required to correctly move a
            tower of 64 disks is <m>2^{64}-1 = 18,446,744,073,709,551,615</m>. At
            a rate of one move per second, that is <m>584,942,417,355</m> years! Clearly
            there is more to this puzzle than meets the eye.</p>
        <p><xref ref="fig-hanoicpp"/> shows an example of a configuration of disks in the
            middle of a move from the first peg to the third. Notice that, as the
            rules specify, the disks on each peg are stacked so that smaller disks
            are always on top of the larger disks. If you have not tried to solve
            this puzzle before, you should try it now. You do not need fancy disks
            and poles&#8211;a pile of books or pieces of paper will work.</p>
        
        <figure align="center" xml:id="fig-hanoicpp">
            <caption>An Example Arrangement of Disks for the Tower of Hanoi</caption>
                <image source="Recursion/hanoi.png" width="80%">
                <description>Image depicting the initial setup of the Tower of Hanoi puzzle. It shows three vertical poles labeled 'fromPole', 'withPole', and 'toPole' on a horizontal base. The 'fromPole' has three disks stacked on it, with the largest at the bottom and the smallest at the top, while the other two poles are empty. This is a classic configuration for the start of the puzzle, which involves moving the disks to another pole under certain rules. </description>
                </image>
            </figure>


        <p>How do we go about solving this problem recursively? How would you go
            about solving this problem at all? What is our base case? Let's think
            about this problem from the bottom up. Suppose you have a tower of five
            disks, originally on peg one. If you already knew how to move a tower of
            four disks to peg two, you could then easily move the bottom disk to peg
            three, and then move the tower of four from peg two to peg three. But
            what if you do not know how to move a tower of height four? Suppose that
            you knew how to move a tower of height three to peg three; then it would
            be easy to move the fourth disk to peg two and move the three from peg
            three on top of it. But what if you do not know how to move a tower of
            three? How about moving a tower of two disks to peg two and then moving
            the third disk to peg three, and then moving the tower of height two on
            top of it? But what if you still do not know how to do this? Surely you
            would agree that moving a single disk to peg three is easy enough,
            trivial you might even say. This sounds like a base case in the making.</p>
        <p>Here is a high-level outline of how to move a tower from the starting
            pole, to the goal pole, using an intermediate pole:</p>
        <p><ol label="1">
            <li>
                <p>Move a tower of height-1 to an intermediate pole, using the final
                    pole.</p>
            </li>
            <li>
                <p>Move the remaining disk to the final pole.</p>
            </li>
            <li>
                <p>Move the tower of height-1 from the intermediate pole to the final
                    pole using the original pole.</p>
            </li>
        </ol></p>
        <p>As long as we always obey the rule that the larger disks remain on the
            bottom of the stack, we can use the three steps above recursively,
            treating any larger disks as though they were not even there. The only
            thing missing from the outline above is the identification of a base
            case. The simplest Tower of Hanoi problem is a tower of one disk. In
            this case, we need move only a single disk to its final destination. A
            tower of one disk will be our base case. In addition, the steps outlined
            above move us toward the base case by reducing the height of the tower
            in steps 1 and 3. <xref ref="lst-hanoicpp"/> shows the Python code to solve the
            Tower of Hanoi puzzle.</p>
        
        <p xml:id="lst-hanoicpp" names="lst_hanoicpp"><term>Listing 1</term></p>
        <program language="cpp"><input>
int moveTower(int height, char fromPole, char toPole, char withPole){
    if (height &gt;= 1){
        moveTower(height-1, fromPole, withPole, toPole);
        moveDisk(fromPole, toPole);
        moveTower(height-1, withPole, toPole, fromPole);
    }
}
</input></program>
        <p>Notice that the code in <xref ref="lst-hanoicpp"/> is almost identical to the
            English description. The key to the simplicity of the algorithm is that
            we make two different recursive calls, one on line 3 and a
            second on line 5. On line 3 we move all but the bottom
            disk on the initial tower to an intermediate pole. The next line simply
            moves the bottom disk to its final resting place. Then on line
            5 we move the tower from the intermediate pole to the top of
            the largest disk. The base case is detected when the tower height is 0;
            in this case there is nothing to do, so the <c>moveTower</c> function
            simply returns. The important thing to remember about handling the base
            case this way is that simply returning from <c>moveTower</c> is what
            finally allows the <c>moveDisk</c> function to be called.</p>
        <p>The function <c>moveDisk</c>, shown in <xref ref="lst-movediskcpp"/>, is very
            simple. All it does is print out that it is moving a disk from one pole
            to another. If you type in and run the <c>moveTower</c> program you can see
            that it gives you a very efficient solution to the puzzle.</p>
        
        <p xml:id="lst-movediskcpp" names="lst_movediskcpp"><term>Listing 2</term></p>
        <program language="cpp"><input>
int moveDisk(char fp, char tp){
    cout &lt;&lt; "moving disk from " &lt;&lt; fp &lt;&lt; " to " &lt;&lt; tp &lt;&lt; endl;
}
</input></program>
        <p>The program in ActiveCode 1 provides the entire solution for three disks.</p>
        <TabNode tabname="C++" tabnode_options="{'subchapter': 'TowerofHanoi', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="hanoicpp" interactive="activecode" language="cpp">
        <input>
//Simulation of the tower of hanoi.

#include &lt;iostream&gt;
using namespace std;

void moveDisk(char fp, char tp){
    cout &lt;&lt; "moving disk from " &lt;&lt; fp &lt;&lt; " to " &lt;&lt; tp &lt;&lt; endl;
}

void moveTower(int height, char fromPole, char toPole, char withPole){
    if (height &gt;= 1){
        moveTower(height-1, fromPole, withPole, toPole); //Recursive call
        moveDisk(fromPole, toPole);
        moveTower(height-1, withPole, toPole, fromPole); //Recursive call
    }
}

int main() {
    moveTower(3, 'A', 'B', 'C');
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'TowerofHanoi', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="hanoipy" interactive="activecode" language="python">
        <input>
#Simulation of the tower of hanoi.

def moveTower(height,fromPole, toPole, withPole):
    if height &gt;= 1:
        moveTower(height-1,fromPole,withPole,toPole) #Recursive call
        moveDisk(fromPole,toPole)
        moveTower(height-1,withPole,toPole,fromPole) #Recursive call

def moveDisk(fp,tp):
    print("moving disk from",fp,"to",tp)

def main():
    moveTower(3,"A","B","C")

main()
        </input>
    </program>
            </TabNode>
 <p>Now that you have seen the code for both <c>moveTower</c> and <c>moveDisk</c>,
            you may be wondering why we do not have a data structure that explicitly
            keeps track of what disks are on what poles. Here is a hint: if you were
            going to explicitly keep track of the disks, you would probably use
            three <c>Stack</c> objects, one for each pole. The answer is that C++
            provides the stacks that we need implicitly through the call stack.</p>

            <reading-questions xml:id="rq-tower-hanoi">

                <exercise>
                    <statement>
            <p>If you change the tower height in Line 17 from 3 to 6, how many moves must you make to complete the Hanoi tower? (hint, try implementing a counter to return the correct number) <var/>  </p></statement><setup><var><condition number="[63, 63]"><feedback><p>Correct, you can make a global counter at line 3, and then cout the increasing total under line 11.</p></feedback></condition><condition number="[62, 62]"><feedback><p>Technically you are correct but, you are off by one.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Please try again you need to add a statement at line 3, and under line 11.</p></feedback></condition></var></setup></exercise>    </reading-questions>   
    </section>

