<?xml version="1.0"?>
<section xml:id="recursion_recursion_matching">
  <title>Matching</title>
  <exercise label="matching_recur">
    <statement>
      <p>Drag the word on the left to its corresponding definition</p>
    </statement>
    <feedback>
      <p>incorrect</p>
    </feedback>
    <matches>
      <match order="1">
        <premise>base case</premise>
        <response>branch of the conditional statement in a recursive function that does not give rise to further recursive calls.</response>
      </match>
      <match order="10">
        <premise>recursion</premise>
        <response>The process of calling the function that is already executing.</response>
      </match>
      <match order="11">
        <premise>recursive call</premise>
        <response>The statement that calls an already executing function.</response>
      </match>
      <match order="12">
        <premise>recursive definition</premise>
        <response>A definition which defines something in terms of itself.</response>
      </match>
      <match order="13">
        <premise>stack frame</premise>
        <response>A stack that contains a group of data.</response>
      </match>
      <match order="14">
        <premise>tuple</premise>
        <response>Data type that contains a sequence of elements of any type, like alist, but is immutable.</response>
      </match>
      <match order="15">
        <premise>tuple assignment</premise>
        <response>An assignment to all of the elements in a tuple using a single assignment statement.</response>
      </match>
      <match order="2">
        <premise>data structure</premise>
        <response>An organization of data for the purpose of making it easier to use.</response>
      </match>
      <match order="3">
        <premise>dynamic programming</premise>
        <response>To solve complex problems by breaking them up, solving the smaller portions, and storing the results to avoid re-calculating them.</response>
      </match>
      <match order="4">
        <premise>exception</premise>
        <response>An error that occurs at runtime.</response>
      </match>
      <match order="5">
        <premise>handle an exception</premise>
        <response>To prevent an exception from terminating a program by wrapping the block of code in a try / except construct.</response>
      </match>
      <match order="6">
        <premise>immutable data type</premise>
        <response>A data type which cannot be modified.</response>
      </match>
      <match order="7">
        <premise>infinite recursion</premise>
        <response>Function that calls itself recursively without ever reaching the base case, and will cause a runtime error.</response>
      </match>
      <match order="8">
        <premise>mutable data type</premise>
        <response>A data type which can be modified.</response>
      </match>
      <match order="9">
        <premise>raise</premise>
        <response>To cause an exception by using the raise statement.</response>
      </match>
    </matches>
  </exercise>
  <conclusion><p>
    <!-- extra space before the progress bar -->            
</p></conclusion>
</section>
