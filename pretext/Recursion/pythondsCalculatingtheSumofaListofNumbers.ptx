<section xml:id="recursion_calculating-the-sum-of-a-vector-of-numbers">
        <title>Calculating the Sum of a Vector of Numbers</title>
        <p>We will begin our investigation with a simple problem that you already
            know how to solve without using recursion. Suppose that you want to
            calculate the sum of a vector of numbers such as:
            <m>[1, 3, 5, 7, 9]</m>. An iterative function that computes the sum
            is shown in <xref ref="lst-itsum-cpp"/>. The function uses an accumulator variable
            (<c>theSum</c>) to compute a running total of all the numbers in the vector
            by starting with <m>0</m> and adding each number in the vector.</p>
        <exploration xml:id="expl-lst-itsum">
            <title>Iterative Sum of Vector</title>
            <task xml:id="lst-itsum-cpp" label="lst-itsum-cpp">
                <title>C++ Implementation</title>
                <statement><program interactive="activecode" language="cpp" label="lst-itsum-cpp-prog"><input>
//Example of summing up a vector without using recursion.

#include &lt;iostream&gt;
using namespace std;

int vectsum(int numVect[]){
    int theSum = 0;
    for (int i = 0; i &lt; 5; i++){
        theSum += numVect[i];
    }
    return theSum;
}

int main() {
    int numVect[5] = {1, 3, 5, 7, 9};
    cout &lt;&lt; vectsum(numVect) &lt;&lt; endl;

    return 0;
}
                </input></program></statement>
            </task>
            <task xml:id="lst-itsum-py" label="lst-itsum-py">
                <title>Python Implementation</title>
                <statement><program xml:id="lst_itsumpy" interactive="activecode" language="python" label="lst_itsumpy-prog"><input>
#Example of summing up a list without using recursion.

def listsum(numList):
    theSum = 0

    for i in numList:
        theSum = theSum + i

    return theSum

def main():
    print(listsum([1, 3, 5, 7, 9]))

main()
                </input></program></statement>
            </task>
        </exploration>
        <p>Pretend for a minute that you do not have <c>while</c> loops or <c>for</c>
            loops. How would you compute the sum of a vector of numbers? If you were a
            mathematician you might start by recalling that addition is a function
            that is defined for two parameters, a pair of numbers. To redefine the
            problem from adding a vector to adding pairs of numbers, we could rewrite
            the vector as a fully parenthesized expression. Such an expression looks
            like this:</p>
        <me>((((1 + 3) + 5) + 7) + 9)</me>
        <p>We can also parenthesize
            the expression the other way around,</p>
        <me>(1 + (3 + (5 + (7 + 9))))</me>
        <p>Notice that the innermost set of
            parentheses, <m>(7 + 9)</m>, is a problem that we can solve without a
            loop or any special constructs. In fact, we can use the following
            sequence of simplifications to compute a final sum.</p>
        <me>\begin{split}
            total &amp; = (1 + (3 + (5 + (7 + 9)))) \\
            total &amp; = (1 + (3 + (5 + 16))) \\
            total &amp; = (1 + (3 + 21)) \\
            total &amp; = (1 + 24) \\
            total &amp; = 25
            \end{split}
        </me>
        <p>How can we take this idea and turn it into a C++ program? First,
            let's restate the sum problem in terms of C++ arrays. We might say
            the sum of the vector <c>numVect</c> is the sum of the first element of the
            vector (<c>numVect[0]</c>), and the sum of the numbers in the rest of the array (<c>numVect.erase(numVect.begin()+0)</c>).</p>
        <p>In this equation <m>first(numVect)</m> returns the first element of
            the array and <m>rest(numVect)</m> returns an array of everything but
            the first element. This is easily expressed in C++ as shown in
            <xref ref="lst-recsum-cpp"/>.</p>
        <exploration xml:id="expl-lst-recsum-cpp">
            <title>Recursive Sum of Vector</title>
            <task xml:id="lst-recsum-cpp" label="lst-recsum-cpp">
                <title>C++ Implementation</title>
                <statement><program xml:id="lst_recsumcpp" interactive="activecode" language="cpp" label="lst_recsumcpp-prog"><input>
//Example of summing a vector by using recursion.

#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int vectsum(vector&lt;int&gt; numVect){
    if (numVect.size() == 0)
        return 0;

    if (numVect.size() == 1)
        return numVect[0];

    // make a copy of the vector without the first element
    vector&lt;int&gt; slice(numVect.begin() + 1, numVect.end());

    //function makes a recursive call to itself.
    return numVect[0] + vectsum(slice);
}

int main() {
    vector&lt;int&gt; numVect = {1, 3, 5, 7, 9};
    cout &lt;&lt; vectsum(numVect) &lt;&lt; endl;
    return 0;
}
                </input></program></statement>
            </task>
            <task xml:id="lst-recsum-py" label="lst-recsum-py">
                <title>Python Implementation</title>
                <statement><program xml:id="lst_recsumpy" interactive="activecode" language="python" label="lst_recsumpy-prog"><input>
#Example of summing a list using recurison.

def listsum(numList):
    if len(numList) == 0:
        return 0
    if len(numList) == 1:
        return numList[0]

    #function makes a recursive call to itself.
    return numList[0] + listsum(numList[1:])

def main():
    print(listsum([1, 3, 5, 7, 9]))

main()
                </input></program></statement>
            </task>
        </exploration>
        <p>There are a few key ideas while using vector to look at. First, on line 6 we are checking to see if the vector is one element long. This
            check is crucial and is our escape clause from the function. The sum of
            a vector of length 1 is trivial; it is just the number in the vector.
            Second, on line 11 our function calls itself! This is the
            reason that we call the <c>vectsum</c> algorithm recursive. A recursive
            function is a function that calls itself.</p>
        <p><xref ref="fig-recsumin"/> shows the series of\
            <term>recursive calls</term> that are needed to sum the vector <m>[1, 3, 5, 7, 9]</m>.
            <idx>recursive calls</idx>
            You should think of
            this series of calls as a series of simplifications. Each time we make a
            recursive call we are solving a smaller problem, until we reach the
            point where the problem cannot get any smaller.</p>

        <figure align="center" xml:id="fig-recsumin">
            <caption>Series of Recursive Calls Adding a List of Numbers.</caption>
                <image source="Recursion/sumlistIn.png" width="50%">
                <description><p>Stacked visualization of recursive function calls to sum a list of numbers. The top box shows 'sum(1,3,5,7,9)' with an arrow pointing to '1 +'. The next box down shows 'sum(3,5,7,9)' with an arrow pointing to '3 +', followed by boxes for 'sum(5,7,9)' with '5 +', 'sum(7,9)' with '7 +', and the last box 'sum(9)' with just '9'. Each box is connected to the next, representing the recursive nature of the calls.</p></description>
                </image>
            </figure>


        <p>When we reach the point where the problem is as simple as it can get, we
            begin to piece together the solutions of each of the small problems
            until the initial problem is solved. <xref ref="fig-recsumout"/> shows the
            additions that are performed as <c>vectsum</c> works its way backward
            through the series of calls. When <c>vectsum</c> returns from the topmost
            problem, we have the solution to the whole problem.</p>
        
        <figure align="center" xml:id="fig-recsumout">
            <caption>Series of Recursive Returns from Adding a List of Numbers.</caption>
                <image source="Recursion/sumlistOut.png" width="50%">
                <description><p>Diagram illustrating the resolution of recursive function calls summing a list of numbers. The bottom box shows 'sum(9)' equaling '9', with an arrow pointing left to the next box 'sum(7,9)' showing '7 + 9'. Above that, 'sum(5,7,9)' equals '5 + 16', then 'sum(3,5,7,9)' with '3 + 21', and at the top, 'sum(1,3,5,7,9)' resulting in '1 + 24'. Each function call resolves to a value that is used in the computation of the previous call, with the final sum at the top being '25'.</p></description>
                </image>
            </figure>
            <conclusion><p>
                <!-- extra space before the progress bar -->            
            </p></conclusion>
    </section>

