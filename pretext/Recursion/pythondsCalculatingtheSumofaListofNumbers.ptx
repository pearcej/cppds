<section xml:id="recursion_calculating-the-sum-of-a-vector-of-numbers">
        <title>Calculating the Sum of a Vector of Numbers</title>
        <p>We will begin our investigation with a simple problem that you already
            know how to solve without using recursion. Suppose that you want to
            calculate the sum of a vector of numbers such as:
            <math>[1, 3, 5, 7, 9]</math>. An iterative function that computes the sum
            is shown in <xref ref="lst-itsumcpp"/>. The function uses an accumulator variable
            (<c>theSum</c>) to compute a running total of all the numbers in the vector
            by starting with <math>0</math> and adding each number in the vector.</p>
        <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'pythondsCalculatingtheSumofaListofNumbers', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="lst_itsumcpp" interactive="activecode" language="cpp">
        <input>
//Example of summing up a vector without using recursion.

#include &lt;iostream&gt;
using namespace std;

int vectsum(int numVect[]){
    int theSum = 0;
    for (int i = 0; i &lt; 5; i++){
        theSum += numVect[i];
    }
    return theSum;
}

int main() {
    int numVect[5] = {1, 3, 5, 7, 9};
    cout &lt;&lt; vectsum(numVect) &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'pythondsCalculatingtheSumofaListofNumbers', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="lst_itsumpy" interactive="activecode" language="python">
        <input>
#Example of summing up a list without using recursion.

def listsum(numList):
    theSum = 0

    for i in numList:
        theSum = theSum + i

    return theSum

def main():
    print(listsum([1, 3, 5, 7, 9]))

main()
        </input>
    </program>
            </TabNode></exercise>
        <p>Pretend for a minute that you do not have <c>while</c> loops or <c>for</c>
            loops. How would you compute the sum of a vector of numbers? If you were a
            mathematician you might start by recalling that addition is a function
            that is defined for two parameters, a pair of numbers. To redefine the
            problem from adding a vector to adding pairs of numbers, we could rewrite
            the vector as a fully parenthesized expression. Such an expression looks
            like this:</p>
        <math_block docname="Recursion/pythondsCalculatingtheSumofaListofNumbers" label="True" nowrap="False" number="True" xml:space="preserve">((((1 + 3) + 5) + 7) + 9)</math_block>
        <p>We can also parenthesize
            the expression the other way around,</p>
        <math_block docname="Recursion/pythondsCalculatingtheSumofaListofNumbers" label="True" nowrap="False" number="True" xml:space="preserve">(1 + (3 + (5 + (7 + 9))))</math_block>
        <p>Notice that the innermost set of
            parentheses, <math>(7 + 9)</math>, is a problem that we can solve without a
            loop or any special constructs. In fact, we can use the following
            sequence of simplifications to compute a final sum.</p>
        <math_block docname="Recursion/pythondsCalculatingtheSumofaListofNumbers" label="True" nowrap="False" number="True" xml:space="preserve">total = \  (1 + (3 + (5 + (7 + 9)))) \\
total = \  (1 + (3 + (5 + 16))) \\
total = \  (1 + (3 + 21)) \\
total = \  (1 + 24) \\
total = \  25</math_block>
        <p>How can we take this idea and turn it into a C++ program? First,
            let's restate the sum problem in terms of C++ arrays. We might say
            the sum of the vector <c>numVect</c> is the sum of the first element of the
            vector (<c>numVect[0]</c>), and the sum of the numbers in the rest of the array (<c>numVect.erase(numVect.begin()+0)</c>).</p>
        <p>In this equation <math>first(numVect)</math> returns the first element of
            the array and <math>rest(numVect)</math> returns an array of everything but
            the first element. This is easily expressed in C++ as shown in
            <xref ref="lst-recsumcpp"/>.</p>
        <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'pythondsCalculatingtheSumofaListofNumbers', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="lst_recsumcpp" interactive="activecode" language="cpp">
        <input>
//Example of summing a vector by using recursion.

#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

int vectsum(vector&lt;int&gt; numVect){
    if (numVect.size() &lt;= 1){
        return numVect[0];
    }
    else {
        vector&lt;int&gt; slice(numVect.begin() + 1, numVect.begin()+numVect.size());
        return numVect[0] + vectsum(slice); //function makes a recursive call to itself.
    }
}

int main() {
    int arr2[] = {1, 3, 5, 7, 9};
    vector&lt;int&gt; numVect(arr2, arr2 + (sizeof(arr2) / sizeof(arr2[0])));  //Initializes vector with same items as arr2.
    cout &lt;&lt; vectsum(numVect) &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'pythondsCalculatingtheSumofaListofNumbers', 'chapter': 'Recursion', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="lst_recsumpy" interactive="activecode" language="python">
        <input>
#Example of summing a list using recurison.

def listsum(numList):
    if len(numList) == 1:
        return numList[0]
    else:
        return numList[0] + listsum(numList[1:]) #function makes a recursive call to itself.

def main():
    print(listsum([1, 3, 5, 7, 9]))

main()
        </input>
    </program>
            </TabNode></exercise>
        <p>There are a few key ideas while using vector to look at. First, on line 6 we are checking to see if the vector is one element long. This
            check is crucial and is our escape clause from the function. The sum of
            a vector of length 1 is trivial; it is just the number in the vector.
            Second, on line 11 our function calls itself! This is the
            reason that we call the <c>vectsum</c> algorithm recursive. A recursive
            function is a function that calls itself.</p>
        <p><xref ref="fig-recsumin"/> shows the series of <term> <idx>recursive calls</idx> </term> that are
            needed to sum the vector <math>[1, 3, 5, 7, 9]</math>. You should think of
            this series of calls as a series of simplifications. Each time we make a
            recursive call we are solving a smaller problem, until we reach the
            point where the problem cannot get any smaller.</p>
        
        <figure align="center" xml:id="fig-recsumin"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Series of Recursive Calls Adding a List of Numbers</caption><image source="Recursion/Figures/sumlistIn.png" width="50%" alt="image"/></figure>
        <p>When we reach the point where the problem is as simple as it can get, we
            begin to piece together the solutions of each of the small problems
            until the initial problem is solved. <xref ref="fig-recsumout"/> shows the
            additions that are performed as <c>vectsum</c> works its way backward
            through the series of calls. When <c>vectsum</c> returns from the topmost
            problem, we have the solution to the whole problem.</p>
        
        <figure align="center" xml:id="fig-recsumout"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure2: Series of Recursive Returns from Adding a List of Numbers</caption><image source="Recursion/Figures/sumlistOut.png" width="50%" alt="image"/></figure>
    </section>

