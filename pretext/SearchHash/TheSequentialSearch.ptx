<section xml:id="search-hash_the-sequential-search">
        <title>The Sequential Search</title>
        <idx>sequential search</idx> 
        <p>When data items are stored in a container type such as a Python list or a C++
            array/vector, we say that they have a linear or sequential relationship. Each data
            item is stored in a position relative to the others. In Python lists, these
            relative positions are the index values of the individual items. In C++ arrays,
            these are simply adjacent memory locations each equally sized to fit the data
            type of the container. Since these index values are ordered, it is possible for
            us to visit them in sequence. This process gives rise to our first searching
            technique, the <term>sequential search</term>.</p>
        <p><xref ref="fig-seqsearch"/> shows how this search works. Starting at the first
            item in the list, we simply move from item to item, following the
            underlying sequential ordering until we either find what we are looking
            for or run out of items. If we run out of items, we have discovered that
            the item we were searching for was not present.</p>
        
        <figure align="center" xml:id="fig-seqsearch"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: Sequential Search of a List of Integers</caption><image source="SearchHash/Figures/seqsearch.png" width="50%"/></figure>
        <p>Both the Python and C++ implementations for this algorithm are shown in
            <xref ref="lst-seqsearchpython"/> and <xref ref="lst-seqsearchcpp"/> respectively. The function needs the list and the item we
            are looking for and returns a boolean value as to whether it is present.
            The boolean variable <c>found</c> is initialized to <c>False</c> and is
            assigned the value <c>True</c> if we discover the item in the list (Or vector, in the case of C++).</p>
        
        

    <program xml:id="search1_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Checks to see if item is in a vector
// retruns true or false (1 or 0)
//using sequential Search
bool sequentialSearch(vector&lt;int&gt; avector, int item) {
    unsigned int pos = 0;
    bool found = false;

    while (pos &lt; avector.size() &amp;&amp; !found) {
        if (avector[pos] == item) {
            found = true;
        } else {
            pos++;
        }
    }

    return found;
}

int main() {
    // Vector initialized using an array
    int arr[] = {1, 2, 32, 8, 17, 19, 42, 13, 0};
    vector&lt;int&gt; testvector(arr,arr+(sizeof(arr)/sizeof(arr[0])));

    cout &lt;&lt; sequentialSearch(testvector, 3) &lt;&lt; endl;
    cout &lt;&lt; sequentialSearch(testvector, 13) &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
        <subsection xml:id="search-hash_analysis-of-sequential-search">
            <title>Analysis of Sequential Search</title>
            <p>To analyze searching algorithms, we need to decide on a basic unit of
                computation. Recall that this is typically the common step that must be
                repeated in order to solve the problem. For searching, it makes sense to
                count the number of comparisons performed. Each comparison may or may
                not discover the item we are looking for. In addition, we make another
                assumption here: the list of items is not ordered in any way. The items
                have been placed randomly into the list. In other words, the probability
                that the item we are looking for is in any particular position is
                exactly the same for each position of the list.</p>
            <p>If the item is not in the list, the only way to know it is to compare it
                against every item present. If there are <math>n</math> items, then the
                sequential search requires <math>n</math> comparisons to discover that the
                item is not there. In the case where the item is in the list, the
                analysis is not so straightforward. There are actually three different
                scenarios that can occur. In the best case we will find the item in the
                first place we look, at the beginning of the list. We will need only one
                comparison. In the worst case, we will not discover the item until the
                very last comparison, the <title_reference>nth</title_reference> comparison.</p>
            <p>What about the average case? On average, we will find the item about
                halfway into the list; that is, we will compare against
                <math>\frac{n}{2}</math> items. Recall, however, that as <em>n</em> gets large,
                the coefficients, no matter what they are, become insignificant in our
                approximation, so the complexity of the sequential search, is
                <math>O(n)</math>. <xref ref="search-hash_tbl-seqsearchtable"/> summarizes these results.</p>
            
            <table xml:id="search-hash_id2"><tabular>
                <title><term>Table 1: Comparisons Used in a Sequential Search of an Unordered List</term></title>
                
                    
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                                <term>Case</term>
                            </cell>
                            <cell>
                                <term>Best Case</term>
                            </cell>
                            <cell>
                                <term>Worst Case</term>
                            </cell>
                            <cell>
                                <term>Average Case</term>
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                item is present
                            </cell>
                            <cell>
                                <math>1</math>
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                            <cell>
                                <math>\frac{n}{2}</math>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                item is not present
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <p>We assumed earlier that the items in our collection had been randomly
                placed so that there is no relative order between the items. What would
                happen to the sequential search if the items were ordered in some way?
                Would we be able to gain any efficiency in our search technique?</p>
            <p>Assume that the list of items was constructed so that the items were in
                ascending order, from low to high. If the item we are looking for is
                present in the list, the chance of it being in any one of the <em>n</em>
                positions is still the same as before. We will still have the same
                number of comparisons to find the item. However, if the item is not
                present there is a slight advantage. <xref ref="fig-seqsearch2"/> shows this
                process as the algorithm looks for the item 50. Notice that items are
                still compared in sequence until 54. At this point, however, we know
                something extra. Not only is 54 not the item we are looking for, but no
                other elements beyond 54 can work either since the list is sorted. In
                this case, the algorithm does not have to continue looking through all
                of the items to report that the item was not found. It can stop
                immediately. <xref ref="lst-seqsearchpython2"/> shows this variation of the
                sequential search function.</p>

        <exercise>
            <statement>
    <p>Q-3: For the following unordered sequential list: {0, 1, 2, 13, 8, 19, 17, 32, 42}, searching for <BlankNode/> would produce the best case scenario, and searching for <BlankNode/> would produce the worst case scenario. <var/>  <var/>  </p></statement><setup><var><condition number="[0, 0]"><feedback><p>Correct! 0 is at the beginning of the list wich would provide the best case of O(1)</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>No! try again, only one value place in this list will produce the best case.</p></feedback></condition></var><var><condition number="[42, 42]"><feedback><p>Correct! 42 is at the end of the list wich would provide the worst case of O(n)</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>No! try again, only one value in this list will produce the worst case.</p></feedback></condition></var></setup></exercise>            
            <figure align="center" xml:id="id3"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Sequential Search of an Ordered List of Integers</caption><image source="SearchHash/Figures/seqsearch2.png" width="50%"/></figure>
            

    <program xml:id="search2_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// Checks to see if item is in a vector
// retruns true or false (1 or 0)
// using ordered sequential Search
bool orderedSequentialSearch(vector&lt;int&gt; avector, int item) {
    unsigned int pos = 0;
    bool found = false;
    bool stop = false;
    while (pos &lt; avector.size() &amp;&amp; !found &amp;&amp; !stop) {
        if (avector[pos] == item) {
            found = true;
        } else {
            if (avector[pos] &gt; item) {
                stop = true;
            } else {
                pos++;
            }
        }
    }

    return found;
}

int main() {
    // Vector initialized using an array
    int arr[] = {0, 1, 2, 8, 13, 17, 19, 32, 42};
    vector&lt;int&gt; testvector(arr,arr+(sizeof(arr)/sizeof(arr[0])));

    cout &lt;&lt; orderedSequentialSearch(testvector, 3) &lt;&lt; endl;
    cout &lt;&lt; orderedSequentialSearch(testvector, 13) &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
            <p><xref ref="search-hash_search-hash_tbl-seqsearchtable2"/> summarizes these results. Note that in the best
                case we might discover that the item is not in the vector by looking at
                only one item. On average, we will know after looking through only
                <math>\frac {n}{2}</math> items. However, this technique is still
                <math>O(n)</math>. In summary, a sequential search is improved by ordering
                the vector only in the case where we do not find the item.</p>
            
            <table xml:id="search-hash_id4"><tabular>
                <title><term>Table 2: Comparisons Used in Sequential Search of an Ordered List</term></title>
                
                    
                    
                    
                    
                    
                        <row header="yes">
                            <cell>
                            </cell>
                            <cell>
                            </cell>
                            <cell>
                            </cell>
                            <cell>
                            </cell>
                        </row>
                    
                    
                        <row>
                            <cell>
                                item is present
                            </cell>
                            <cell>
                                <math>1</math>
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                            <cell>
                                <math>\frac{n}{2}</math>
                            </cell>
                        </row>
                        <row>
                            <cell>
                                item not present
                            </cell>
                            <cell>
                                <math>1</math>
                            </cell>
                            <cell>
                                <math>n</math>
                            </cell>
                            <cell>
                                <math>\frac{n}{2}</math>
                            </cell>
                        </row>
                    
                
            </tabular></table>
            <note>
                <title>Self Check</title>

    <exercise label="question_SRCH_1">
        <statement>

                <p>Q-6: Suppose you are doing a sequential search of the list [15, 18, 2, 19, 18, 0, 8, 14, 19, 14].  How many comparisons would you need to do in order to find the key 18?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Five comparisons would get the second 18 in the list.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>You do not need to search the entire list, only until you find the key you are looking for.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    <p>No, remember in a sequential search you start at the beginning and check each key until you find what you are looking for or exhaust the list.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    <p>In this case only 2 comparisons were needed to find the key.</p>
                </feedback>
            </choice>
</choices>

    </exercise>

    <exercise label="question_SRCH_2">
        <statement>

                <p>Q-7: Suppose you are doing a sequential search using a program that is enhanced to handle ordered lists more efficiently. When passing the list [3, 5, 6, 8, 11, 12, 14, 15, 17, 18] as a parameter, how many comparisons would you need to do in order to find the key 13?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>10</p>
                </statement>
                <feedback>
                    <p>You do not need to search the entire list, since it is ordered you can stop searching when you have compared with a value larger than the key.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    <p>Since 11 is less than the key value 13 you need to keep searching.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>7</p>
                </statement>
                <feedback>
                    <p>Since 14 is greater than the key value 13 you can stop.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>6</p>
                </statement>
                <feedback>
                    <p>Because 12 is less than the key value 13 you need to keep going.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
            </note>
        </subsection>
    </section>

