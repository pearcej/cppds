<section xml:id="algorithm-analysis_an-anagram-detection-example">
        <title>An Anagram Detection Example</title>
        <p>A good example problem for showing algorithms with different orders of
            magnitude is the classic anagram detection problem for strings. One
            string is an anagram of another if the second is simply a rearrangement
            of the first. For example, <c>"heart"</c> and <c>"earth"</c> are anagrams. The
            strings <c>"python"</c> and <c>"typhon"</c> are anagrams as well. For the sake
            of simplicity, we will assume that the two strings in question are of
            equal length and that they are made up of symbols from the set of 26
            lowercase alphabetic characters. Our goal is to write a Boolean function
            that will take two strings and return whether they are anagrams.</p>
        <subsection xml:id="algorithm-analysis_solution-1-checking-off">
            <title>Solution 1: Checking Off</title>
            <p>Our first solution to the anagram problem will check the lengths of the
                strings and then to see that each character in the first string actually
                occurs in the second. If it is possible to <q>checkoff</q> each character, then
                the two strings must be anagrams. Checking off a character will be
                accomplished by replacing it with the special C++ character <c>\0</c>.
                The first step in the
                process will be to convert the second string to a local second string
                for checking off.
                Each character
                from the first string can be checked against the characters in the local second string
                and if found, checked off by replacement. <xref ref="lst-anagramsolution"/> shows this function.</p>
            
            <TabNode tabname="C++" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="active0cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

//checks to see if the anagrams have the same number of characters

bool anagramsolution1(string s1, string s2){
    bool stillOK = true;
    if (s1.length() != s2.length()) {
        stillOK = false;
        return stillOK;
    }
    string locals2 = s2;
    int n = s1.length();
    unsigned int pos1 = 0;

    // checks to see if all of the letters are the same in both inputs

    while (pos1 &lt; s1.length() &amp;&amp; stillOK){
        int pos2 = 0;
        bool found = false;
        while (pos2 &lt; n &amp;&amp; !found){
            if (s1[pos1] == locals2[pos2]){
                found = true;
            } else{
                pos2 = pos2 + 1;
            }
        }
        if (found){
            locals2[pos2] = '\0';
        }
        else{
            stillOK = false;
        }
        pos1 = pos1 + 1;
    }
    return stillOK;
}

int main(){
    bool value = anagramsolution1("abcd", "dcab");
    cout &lt;&lt; value &lt;&lt; endl;
    return 0;
}
        </input>
    </program>
                </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="active0py" interactive="activecode" language="python">
        <input>
#checks to see if the anagrams have the same number of characters

def anagramSolution1(s1,s2):
    stillOK = True
    if len(s1) != len(s2):
        stillOK = False
        return stillOK

    lists2 = list(s2)
    pos1 = 0

    # checks to see if all of the letters are the same in both inputs
    while pos1 &lt; len(s1) and stillOK:
        pos2 = 0
        found = False
        while pos2 &lt; len(lists2) and not found:
            if s1[pos1] == lists2[pos2]:
                found = True
            else:
                pos2 = pos2 + 1

        if found:
            lists2[pos2] = None
        else:
            stillOK = False

        pos1 = pos1 + 1

    return stillOK

def main():
    print(anagramSolution1('abcd','dcba'))
main()
        </input>
    </program>
                </TabNode>
            <p>To analyze this algorithm, we need to note that each of the <em>n</em>
                characters in <c>s1</c> will cause an iteration through up to <em>n</em>
                characters in the array from <c>s2</c>. Each of the <em>n</em> positions in the
                array will be visited once to match a character from <c>s1</c>. The number
                of visits then becomes the sum of the integers from 1 to <em>n</em>.</p> <p>We stated earlier that this can be written as</p>
<me xml:id="eq1" number="yes">
    
    \sum_{i=1}^{n} i = \frac {n(n+1)}{2} = \frac {1}{2}n^{2} + \frac {1}{2}n
    
</me>
<p>As <m>n</m> gets large, the <m>n^{2}</m> term will dominate the <m>n</m> term and the <m>\frac {1}{2}</m> can be ignored. Therefore, this solution is <m>O(n^{2})</m>.</p>




        </subsection>
        <subsection xml:id="algorithm-analysis_solution-2-sort-and-compare">
            <title>Solution 2: Sort and Compare</title>
            <p>Another solution to the anagram problem will make use of the fact that
                even though <c>s1</c> and <c>s2</c> are different, they are anagrams only if
                they consist of exactly the same characters. So, if we begin by sorting
                each string alphabetically, from a to z, we will end up with the same
                string if the original two strings are anagrams. <xref ref="lst-ana2"/> shows
                this solution.</p>
            
            <TabNode tabname="C++" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="active6cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;algorithm&gt;
using namespace std;

// sorts anagrams in order from a-z, and then compares them
bool anagramsolution2(string s1, string s2){
    sort(s1.begin(), s1.end());
    sort(s2.begin(), s2.end());

    unsigned int pos = 0;
    bool matches = true;

    while (pos &lt; s1.length() &amp;&amp; matches){
        if (s1[pos] == s2[pos]){
            pos = pos + 1;
        } else{
            matches = false;
        }
    }
    return matches;
}

int main(){
    bool value = anagramsolution2("abcde", "edcba");
    cout &lt;&lt; value &lt;&lt; endl;
    return 0;
}
        </input>
    </program>
                </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="active6py" interactive="activecode" language="python">
        <input>
# sorts anagrams in order from a-z, and then compares them
def anagramSolution2(s1,s2):
    alist1 = list(s1)
    alist2 = list(s2)

    alist1.sort()
    alist2.sort()

    pos = 0
    matches = True

    while pos &lt; len(s1) and matches:
        if alist1[pos]==alist2[pos]:
            pos = pos + 1
        else:
            matches = False

    return matches

def main():
    print(anagramSolution2('abcde','edcba'))
main()
        </input>
    </program>
                </TabNode>
            <p>At first glance you may be tempted to think that this algorithm is
                <m>O(n)</m>, since there are three consecutive simple iterations:
                the first two to convert strings to char arrays and the last
                to compare the <em>n</em>
                characters after the sorting process. However, the two calls to the
                C++ <c>sort</c> function are not without their own cost. As we will see in
                a later chapter, sorting is typically either <m>O(n^{2})</m> or
                <m>O(n\log n)</m>, so the sorting operations dominate the iteration.
                In the end, this algorithm will have the same order of magnitude as that
                of the sorting process.</p>
        </subsection>
        <subsection xml:id="algorithm-analysis_solution-3-brute-force">
            <title>Solution 3: Brute Force</title>
            <p>A <idx>brute force</idx><term>brute force</term> technique for solving a problem typically tries to
                exhaust all possibilities. For the anagram detection problem, we can
                simply generate an array of all possible strings using the characters from
                <c>s1</c> and then see if <c>s2</c> occurs. However, there is a difficulty
                with this approach. When generating all possible strings from <c>s1</c>,
                there are <em>n</em> possible first characters, <m>n-1</m> possible
                characters for the second position, <m>n-2</m> for the third, and so
                on. The total number of candidate strings is
                <m>n*(n-1)*(n-2)*...*3*2*1</m>, which is <m>n!</m>. Although some
                of the strings may be duplicates, the program cannot know this ahead of
                time and so it will still generate <m>n!</m> different strings.</p>
            <p>It turns out that <m>n!</m> grows even faster than <m>2^{n}</m> as
                <em>n</em> gets large. In fact, if <c>s1</c> were 20 characters long, there would
                be <m>20!=2,432,902,008,176,640,000</m> possible candidate strings.
                If we processed one possibility every second, it would take us
                77,146,816,596 years to go through the entire array. This is probably not
                going to be a good solution.</p>
        </subsection>
        <subsection xml:id="algorithm-analysis_solution-4-count-and-compare">
            <title>Solution 4: Count and Compare</title>
            <p>Our final solution to the anagram problem takes advantage of the fact
                that any two anagrams will have the same number of a's, the same number
                of b's, the same number of c's, and so on. In order to decide whether
                two strings are anagrams, we will first count the number of times each
                character occurs. Since there are 26 possible characters, we can use an array
                of 26 counters, one for each possible character. Each time we see a
                particular character, we will increment the counter at that position. In
                the end, if the two arrays of counters are identical, the strings must be
                anagrams. <xref ref="lst-ana4"/> shows this solution.</p>
            
            <TabNode tabname="C++" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="active7cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

// uses an array to count the number of a ocurrences of the two inputs
// if the number of occurrences is the same then the input is an anagram

bool anagramSolution4(string s1, string s2){
    int c1[26] = {0};
    int c2[26] = {0};

    int x;
    int a = 'a';
    for (unsigned int i = 0; i &lt; s1.length(); i++){
        x = s1[i] - a;
        int pos = x;
        c1[pos] = c1[pos] + 1;
    }

    int y;
    int b = 'a';
    for (unsigned int i = 0; i &lt; s2.length(); i++){
        y = s2[i] - b;
        int pos = y;
        c2[pos] = c2[pos] + 1;
    }

    int j = 0;
    bool stillOK = true;
    while (j &lt; 26 &amp;&amp; stillOK){
        if (c1[j] == c2[j]){
            j = j + 1;
        } else{
            stillOK = false;
        }
    }
    return stillOK;
}

int main(){
    bool value = anagramSolution4("apple", "pleap");
    cout &lt;&lt; value &lt;&lt; endl;
    return 0;
}
        </input>
    </program>
                </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'AnAnagramDetectionExample', 'chapter': 'AlgorithmAnalysis', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="active7py" interactive="activecode" language="python">
        <input>
""" uses an array to count the number of a ocurrences of the two inputs
if the number of occurrences is the same then the input is an anagram """

def anagramSolution4(s1,s2):
    c1 = [0]*26
    c2 = [0]*26

    for i in range(len(s1)):
        pos = ord(s1[i])-ord('a')
        c1[pos] = c1[pos] + 1

    for i in range(len(s2)):
        pos = ord(s2[i])-ord('a')
        c2[pos] = c2[pos] + 1

    j = 0
    stillOK = True
    while j&lt;26 and stillOK:
        if c1[j]==c2[j]:
            j = j + 1
        else:
            stillOK = False

    return stillOK

def main():
    print(anagramSolution4('apple','pleap'))
main()
        </input>
    </program>
                </TabNode>
            <p>Again, the solution has a number of iterations. However, unlike the
                first solution, none of them are nested. The first two iterations used
                to count the characters are both based on <em>n</em>. The third iteration,
                comparing the two arrays of counts, always takes 26 steps since there are
                26 possible characters in the strings. Adding it all up gives us
                <m>T(n)=2n+26</m> steps. That is <m>O(n)</m>. We have found a
                linear order of magnitude algorithm for solving this problem.</p>
            <p>Before leaving this example, we need to say something about space
                requirements. Although the last solution was able to run in linear time,
                it could only do so by using additional storage to keep the two arrays of
                character counts. In other words, this algorithm sacrificed space in
                order to gain time.</p>
            <p>This is a common occurrence. On many occasions you will need to make
                decisions between time and space trade-offs. In this case, the amount of
                extra space is not significant. However, if the underlying alphabet had
                millions of characters, there would be more concern. As a computer
                scientist, when given a choice of algorithms, it will be up to you to
                determine the best use of computing resources given a particular
                problem.</p>

    <reading-questions xml:id="rq-alnagram-detection">
        <title>
            Reading Questions
        </title>
        <exercise label="analysis_1">
            <statement>
    
                    <p>Given the following code fragment, what is its Big-O running time?</p>
                    <program language="cpp"><input>
    int main(){
        int test = 0;
        for (int i = 0; i &lt; n; i++){
            for (int j = 0; j &lt; n; j++){
                test = test + i * j;
            }
        }
        return 0;
    }
    </input></program>
    
            </statement>
    <choices>
    
                <choice>
                    <statement>
                        <p>O(n)</p>
                    </statement>
                    <feedback>
                        <p>No. In an example like this you want to count the nested loops, especially the loops that are dependent on the same variable, in this case, n.</p>
                    </feedback>
                </choice>
    
                <choice correct="yes">
                    <statement>
                        <p>O(n<sup>2</sup>)</p>
                    </statement>
                    <feedback>
                        <p>Right! A nested loop like this is O(n<sup>2</sup>).</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(log n)</p>
                    </statement>
                    <feedback>
                        <p>No. log n typically is indicated when the problem is iteratively made smaller</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(n<sup>3</sup>)</p>
                    </statement>
                    <feedback>
                        <p>No. In an example like this you want to count the nested loops. especially the loops that are dependent on the same variable, in this case, n.</p>
                    </feedback>
                </choice>
    </choices>
    
        </exercise>
        <exercise label="analysis_2">
            <statement>
    
                    <p>Given the following code fragment what is its Big-O running time?</p>
                    <program language="cpp"><input>
    int main(){
        int test = 0;
        for (int i = 0; i &lt; n; i++){
            test = test + 1;
        }
        for (int j = 0; j &lt; n; j++){
            test = test - 1;
        }
        return 0;
    }
    </input></program>
    
            </statement>
    <choices>
    
                <choice correct="yes">
                    <statement>
                        <p>O(n)</p>
                    </statement>
                    <feedback>
                        <p>Right! Even though there are two loops they are not nested.  You might think of this as O(2n) but we can ignore the constant 2.</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(n<sup>2</sup>)</p>
                    </statement>
                    <feedback>
                        <p>No. Be careful, in counting loops you want to look carefully at whether or not the loops are nested.</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(log n)</p>
                    </statement>
                    <feedback>
                        <p>No. log n typically is indicated when the problem is iteratively made smaller.</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(n<sup>3</sup>)</p>
                    </statement>
                    <feedback>
                        <p>No. Be careful, in counting loops you want to look carefully at whether or not the loops are nested.</p>
                    </feedback>
                </choice>
    </choices>
    
        </exercise>
        <exercise label="analysis_3">
            <statement>
    
                    <p> Given the following code fragment what is its Big-O running time?</p>
                    <program language="cpp"><input>
    int main(){
        int i = n;
        int count = 0;
        while (i &gt; 0){
            count = count + 1;
            i = i // 2;
        }
        return 0;
    }
    </input></program>
    
            </statement>
    <choices>
    
                <choice>
                    <statement>
                        <p>O(n)</p>
                    </statement>
                    <feedback>
                        <p>No. Look carefully at the loop variable i.  Notice that the value of i is cut in half each time through the loop.  This is a big hint that the performance is better than O(n)</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(n<sup>2</sup>)</p>
                    </statement>
                    <feedback>
                        <p>No. Check again, is this a nested loop?</p>
                    </feedback>
                </choice>
    
                <choice correct="yes">
                    <statement>
                        <p>O(log n)</p>
                    </statement>
                    <feedback>
                        <p>Right! The value of i is cut in half each time through the loop so it will only take log n iterations.</p>
                    </feedback>
                </choice>
    
                <choice>
                    <statement>
                        <p>O(n<sup>3</sup>)</p>
                    </statement>
                    <feedback>
                        <p>No. Check again, is this a nested loop?</p>
                    </feedback>
                </choice>
    </choices>
    
        </exercise>
        
        <exercise>
            <statement>
    <p>If an algorithm performing at <m>O(n^{2})</m> has the integer 8 as input, what is the worst case scenario for the algorithm? <var/>  </p></statement><setup><var><condition number="[64]"><feedback><p>Correct!</p></feedback></condition><condition number="[16]"><feedback><p>That would be 2n, which would be simplified as n.</p></feedback></condition><condition number="[8]"><feedback><p>That would be n.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Wrong, Try again!</p></feedback></condition></var></setup></exercise>
    </reading-questions>            
        </subsection>
        <p>
                   
        </p>
    </section>

