<section xml:id="algorithm-analysis_analysis-of-string-operators">
        <title>Analysis of String Operators</title>
        <p>Prior to C++11 the string class was not required to store its
            character elements contiguously. Now string acts much like the vector class, except
            for some string optimizations and other minor differences.</p>
        <p>C++11 strings use contiguous storage locations
            in an underlying (typically larger) array just like vectors do.
            Due to this, the character elements in strings can be accessed and
            traversed with the help of iterators, and they
            can also be accessed randomly using indexes.</p>
        <p>Like vectors, strings have a dynamic size meaning that whenever
            a new character is inserted or deleted,
            their size changes automatically.
            Just like vectors, new elements can be inserted into or deleted from any part of a string,
            and automatic reallocation for other existing items in the string is applied.</p>
        <p>Indexing and assigning a new character to an index position
            that already exists both take <m>O(1)</m>, the same amount of time no matter how
            large the string is.</p>
        <p>Now that we have seen how performance can be measured concretely you can
            look at <xref ref="algorithm-analysis_tbl-strbigocpp"/> to see the Big-O efficiency of all the
            basic string operations and you will see a striking resemblance to vectors because
            the implementations are so similar.</p>
        
        <table xml:id="algorithm-analysis_tbl-strbigocpp">
            <title>Big-O Efficiency of C++ String Operations</title>
            <tabular>
            
                
                
                
                    <row header="yes">
                        <cell>
                            Operation
                        </cell>
                        <cell>
                            Big-O Efficiency
                        </cell>
                    </row>
                
                
                    <row>
                        <cell>
                            <c>at</c>, <c>[]</c>
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>at</c> and <c>[]</c> assignment
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>push_back()</c>
                        </cell>
                        <cell>
                            typically <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>pop_back()</c>
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>erase(i)</c>
                        </cell>
                        <cell>
                            <m>O(n)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>insert(i, item)</c>
                        </cell>
                        <cell>
                            <m>O(n)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>find(srt, stp, item)</c>
                        </cell>
                        <cell>
                            <m>O(\log n)</m> or <m>O(n)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>reserve()</c>
                        </cell>
                        <cell>
                            <m>O(n)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>begin()</c>
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>end()</c>
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <c>size()</c>
                        </cell>
                        <cell>
                            <m>O(1)</m>
                        </cell>
                    </row>
                
            
        </tabular></table>
        <p>Just like vectors, the <c>push_back()</c> operation is <m>O(1)</m> unless there is inadequate capacity,
            in which case the entire
            string is moved to a larger contiguous underlying array, which
            is <m>O(n)</m>.</p>
            <p>
                <!-- extra space before the progress bar -->
            </p>
    </section>
