<section xml:id="sort_the-insertion-sort">
        <title>The Insertion Sort</title>
        <p><idx>insertion sort</idx>The <term>insertion sort</term>, although still <m>O(n^{2})</m>, works in a
            slightly different way. It always maintains a sorted subvector in the
            lower positions of the vector. Each new item is then <q>inserted</q> back into
            the previous subvector such that the sorted subvector is one item larger.
            <xref ref="fig-insertionsort"/> shows the insertion sorting process. The shaded
            items represent the ordered subvectors as the algorithm makes each pass.</p>
        
        <figure align="center" xml:id="fig-insertionsort"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: <literal>insertionSort</literal></caption><image source="Sort/Figures/insertionsort.png" width="50%"/></figure>
        <p>We begin by assuming that a vector with one item (position <m>0</m>) is
            already sorted. On each pass, one for each item 1 through <m>n-1</m>,
            the current item is checked against those in the already sorted subvector.
            As we look back into the already sorted subvector, we shift those items
            that are greater to the right. When we reach a smaller item or the end
            of the subvector, the current item can be inserted.</p>
        <p><xref ref="fig-insertionpass"/> shows the fifth pass in detail. At this point in
            the algorithm, a sorted subvector of five items consisting of 17, 26, 54,
            77, and 93 exists. We want to insert 31 back into the already sorted
            items. The first comparison against 93 causes 93 to be shifted to the
            right. 77 and 54 are also shifted. When the item 26 is encountered, the
            shifting process stops and 31 is placed in the open position. Now we
            have a sorted subvector of six items.</p>
        
        <figure align="center" xml:id="fig-insertionpass"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 5: <literal>insertionSort</literal>: Fifth Pass of the Sort</caption><image source="Sort/Figures/insertionpass.png" width="50%"/></figure>
        <p>The implementation of <c>insertionSort</c> (<xref ref="lst-insertion"/>) shows that
            there are again <m>n-1</m> passes to sort <em>n</em> items. The iteration
            starts at position 1 and moves through position <m>n-1</m>, as these
            are the items that need to be inserted back into the sorted subvectors.
            Line 8 performs the shift operation that moves a value up one position
            in the vector, making room behind it for the insertion. Remember that this
            is not a complete exchange as was performed in the previous algorithms.</p>
        <p>The maximum number of comparisons for an insertion sort is the sum of
            the first <m>n-1</m> integers. Again, this is <m>O(n^{2})</m>.
            However, in the best case, only one comparison needs to be done on each
            pass. This would be the case for an already sorted vector.</p>
        <p>One note about shifting versus exchanging is also important. In general,
            a shift operation requires approximately a third of the processing work
            of an exchange since only one assignment is performed. In benchmark
            studies, insertion sort will show very good performance.</p>
        <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'TheInsertionSort', 'chapter': 'Sort', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="lst_insertion_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;int&gt; insertionSort(vector&lt;int&gt; avector) {
    for (unsigned int index=1; index&lt;avector.size(); index++) {

        int currentvalue = avector[index];
        int position = index;

        while (position&gt;0 &amp;&amp; avector[position-1]&gt;currentvalue) {
            avector[position] = avector[position-1];
            position--;
        }

        avector[position] = currentvalue;
    }

    return avector;
}

int main() {
    // Vector initialized using a static array
    static const int arr[] = {54, 26, 93, 17, 77, 31, 44, 55, 20};
    vector&lt;int&gt; avector (arr, arr + sizeof(arr) / sizeof(arr[0]) );

    avector = insertionSort(avector);

    //prints the sorted vector
    for (unsigned int i=0; i&lt;avector.size(); i++) {
        cout &lt;&lt; avector[i] &lt;&lt; " ";;
    }
    cout &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
            </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'TheInsertionSort', 'chapter': 'Sort', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="lst_insertion" interactive="activecode" language="python">
        <input>
def insertionSort(alist): #function that insertsorts through the list
   for index in range(1,len(alist)):

     currentvalue = alist[index]
     position = index

     while position&gt;0 and alist[position-1]&gt;currentvalue:
         alist[position]=alist[position-1]
         position = position-1

     alist[position]=currentvalue

def main():

    alist = [54,26,93,17,77,31,44,55,20]
    insertionSort(alist)
    print(alist)

main()
        </input>
    </program>
            </TabNode></exercise>
        <raw format="html" xml:space="preserve">&lt;script src="../_static/sortmodels.js"&gt;&lt;/script&gt;
&lt;script src="../_static/sortviewers.js"&gt;&lt;/script&gt;

&lt;div id="insertion_anim" class=""&gt;
&lt;canvas id="insertion_anim_canvas" width="400" height="400" style="border:4px solid blue"&gt;&lt;/canvas&gt;
&lt;br /&gt;
&lt;button onclick="insertion_anim_anim = insertion_anim_init('insertion_anim')"&gt;Initialize&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.run('insertion_anim_anim')"&gt;Run&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.stop()"&gt;Stop&lt;/button&gt; &lt;/br&gt;
&lt;button onclick="insertion_anim_anim.begin()"&gt;Beginning&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.forward()"&gt;Step Forward&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.backward()"&gt;Step Backward&lt;/button&gt;
&lt;button onclick="insertion_anim_anim.end()"&gt;End&lt;/button&gt;

&lt;script&gt;
insertion_anim_init = function(divid)
{
   var a = new Animator(new InsertionSortModel(), new BarViewer(), divid)
   a.init()
   return a
}
&lt;/script&gt;

&lt;/div&gt;
</raw>
        <!--For more detail, CodeLens 4 allows you to step through the algorithm.-->
        <!---->
        <!--.. codelens:: insertionsortcodetrace-->
        <!--:caption: Tracing the Insertion Sort-->
        <!---->
        <!--def insertionSort(alist):-->
        <!--for index in range(1,len(alist)):-->
        <!---->
        <!--currentvalue = alist[index]-->
        <!--position = index-->
        <!---->
        <!--while position>0 and alist[position-1]>currentvalue:-->
        <!--alist[position]=alist[position-1]-->
        <!--position = position-1-->
        <!---->
        <!--alist[position]=currentvalue-->
        <!--def main():-->
        <!--alist = [54,26,93,17,77,31,44,55,20]-->
        <!--insertionSort(alist)-->
        <!--print(alist)
main()-->
        <p>The visualization above allows you to step through the algorithm. Red bars represent
            the element being looked at and blue represents the last element to look at
            during a pass.</p>
        <p>The visualization below allows you to examine the individual steps of the algorithm at a slower pace.
            Bars that are orange indicate that it is being compared to items to the left.
            Bars that are blue indicate that it is one of the items currently being compared against the orange bar.</p>
        <raw format="html" xml:space="preserve">&lt;div id="vis_insertion_sort" class="video_popup runestone " &gt;
&lt;video controls preload="none"  poster="../_static/vis_insertion_sort_thumb.png"&gt;
    &lt;source src="../_static/vis_insertion_sort.webm" type="video/webm"&gt;&lt;/source&gt;
    No supported video types
&lt;/video&gt;
&lt;/div&gt;
&lt;script&gt;
  window.addEventListener('load', (event) =&gt; {
    jQuery(function($) {
        var rb = new RunestoneBase();
        $('#vis_insertion_sort_thumb').click(function(e) {
            $('#vis_insertion_sort').show();
            $('#vis_insertion_sort_thumb').hide();
            rb.logBookEvent({'event':'video','act':'play','div_id': 'vis_insertion_sort'});
            // Log the run event
        });
        $('#vis_insertion_sort video').one("click", function(){
            this.play();
        });
        $('#vis_insertion_sort video').one("play", function(){
            rb.logBookEvent({'event':'video','act':'play','div_id': 'vis_insertion_sort'});
        });
    });
  });
&lt;/script&gt;
</raw>
        <note>
            <title>Self Check</title>

    <exercise label="question_sort_3">
        <statement>

            <dl>
                <li>
                    <title>Q-5:  Suppose you have the following list of numbers to sort:</title>
                    
                        <p>[15, 5, 4, 18, 12, 19, 14, 10, 8, 20] which list represents the partially sorted list after three complete passes of insertion sort?</p>
                    
                </li>
            </dl>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[4, 5, 12, 15, 14, 10, 8, 18, 19, 20]</p>
                </statement>
                <feedback>
                    <p>This is the result of bubble sort.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[15, 5, 4, 10, 12, 8, 14, 18, 19, 20]</p>
                </statement>
                <feedback>
                    <p>This is the result of selection sort.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[4, 5, 15, 18, 12, 19, 14, 10, 8, 20]</p>
                </statement>
                <feedback>
                    <p>Insertion sort works at the start of the list.  Each pass produces a longer sorted list.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[15, 5, 4, 18, 12, 19, 14, 8, 10, 20]</p>
                </statement>
                <feedback>
                    <p>Insertion sort works on the front of the list not the end.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
        </note>
    </section>

