<section xml:id="sort_the-bubble-sort">
        <title>The Bubble Sort</title>
        <p>The <term>bubble sort</term> makes multiple passes through an array. It compares
            adjacent items and exchanges those that are out of order. Each pass
            through the array places the next largest value in its proper place. In
            essence, each item <q>bubbles</q> up to the location where it belongs.</p>
        <p><xref ref="fig-bubblepass"/> shows the first pass of a bubble sort. The shaded
            items are being compared to see if they are out of order. If there are
            <em>n</em> items in the array, then there are <m>n-1</m> pairs of items that
            need to be compared on the first pass. It is important to note that once
            the largest value in the array is part of a pair, it will continually be
            moved along until the pass is complete.</p>
        
        <figure align="center" xml:id="fig-bubblepass">
            <caption><c>BubbleSort</c> The First Pass</caption>
                <image source="Sort/bubblepass.png" width="50%">
                <description>Illustration of bubble sort algorithm during the first pass. A series of arrays showing the step-by-step process of sorting numbers in ascending order. Starting with the array [54, 26, 93, 17, 77, 31, 44, 55, 20], subsequent arrays demonstrate swapping of elements, marked as 'Exchange', or retention of position, marked as 'No Exchange', to progressively move the highest number, 93, to the correct position at the end of the array after the first pass. The final array in the sequence is [26, 54, 17, 77, 31, 44, 55, 20, 93], with the note '93 in place after first pass' indicating the completion of this sorting stage.</description>
                </image>
            </figure>

        <p>At the start of the second pass, the largest value is now in place.
            There are <m>n-1</m> items left to sort, meaning that there will be
            <m>n-2</m> pairs. Since each pass places the next largest value in
            place, the total number of passes necessary will be <m>n-1</m>. After
            completing the <m>n-1</m> passes, . <xref ref="search-hash_lst-bubblesort_cpp"/>  and <xref ref = "search-hash_lst-bubblesort_py"/>
            show the complete <c>bubbleSort</c> function. Ithe smallest item must be in the
            correct position with no further processing requiredt takes the array as a
            parameter, and modifies it by swapping items as necessary.</p>
        <p>Typically, swapping two elements in an array requires a temporary storage location (an
            additional memory location). A code fragment such as</p>
        <pre>temp = alist[i];
alist[i] = alist[j];
alist[j] = temp;</pre>
        <p>will exchange the <title_reference>ith</title_reference> and <title_reference>jth</title_reference> items in the array. Without the
            temporary storage, one of the values would be overwritten.</p>
        <p>Lines 5-7 in <xref ref="search-hash_lst-bubblesort_cpp"/>  and <xref ref = "search-hash_lst-bubblesort_py"/> perform the exchange of the <m>i</m> and
            <m>(i+1)th</m> items using the three&#8211;step procedure described
            earlier. Note that we could also have used the simultaneous assignment
            to swap the items.</p>
        
        <figure align="center" xml:id="fig-pythonswap">
            <caption>Exchanging Two Values in Python</caption>
                <image source="Sort/swap.png" width="50%">
                <description>A diagram explaining the process of exchanging two values in a programming language with an extra storage location, compared to Python where exchange can be done with two simultaneous assignments. The upper part of the image shows two array elements labeled 'i' and 'j' with values 93 and 44, and a 'temp' variable used for the 3-step swap process. The lower part shows the simplified Python method where the values 93 and 44 are swapped in place without needing a temporary storage variable.</description>
                </image>
            </figure>



        <p>The following activecode example shows the complete <c>bubbleSort</c> function working on the array
            shown above.</p>
    
 <example xml:id="search-hash_lst-bubblesort_cpp">
    <title>Bubble Sort Algorithm in C++</title>  

    <program xml:id="lst_bubble_cpp" interactive="activecode" language="cpp">
        <input>
                    #include &lt;iostream&gt;
                    #include &lt;vector&gt;
                    using namespace std;

                    //function goes through list sorting adjacent values as it bubbles
                    //the largest value to the top.
                    vector&lt;int&gt; bubbleSort(vector&lt;int&gt; avector) { //the vector for bubble sort
                    for (int passnum = avector.size()-1; passnum &gt; 0; passnum -= 1) {
                        for (int i = 0; i &lt; passnum; i++) {
                            if (avector[i] &gt; avector[i+1]) {
                                int temp = avector[i];
                                avector[i] = avector[i+1];
                                avector[i+1] = temp;
                            }
                        }
                    }
                    return avector;
                    }

                    int main() {
                        // Vector initialized using a static array
                        static const int arr[] = {54,26,93,17,77,31,44,55,20};
                        vector&lt;int&gt; avector (arr, arr + sizeof(arr) / sizeof(arr[0]) );

                        vector&lt;int&gt; bvector = bubbleSort(avector);
                        for (unsigned int i = 0; i &lt; bvector.size(); i++) {
                            cout&lt;&lt;bvector[i]&lt;&lt; " ";
                        }
                        return 0;
                    }
        </input>
    </program>
</example>

<example xml:id="search-hash_lst-bubblesort_py">
    <title>Bubble Sort Algorithm in Python</title>  
    <program xml:id="lst_bubble_py" interactive="activecode" language="python">
        <input>
"""function goes through list sorting adjacent values as it bubbles
the largest value to the top."""
def bubbleSort(alist):
    for passnum in range(len(alist)-1,0,-1):
        for i in range(passnum):
            if alist[i]&gt;alist[i+1]:
                temp = alist[i]
                alist[i] = alist[i+1]
                alist[i+1] = temp

def main():
    alist = [54,26,93,17,77,31,44,55,20]
    bubbleSort(alist)
    print(alist)

main()
        </input>
    </program>
</example>
<interactive>
    <script src="pretext/_static/sortmodels.js"></script>
    <script src="pretext/_static/sortviewers.js"></script>
    <div id="bubble_anim" class="">
      <canvas id="bubble_anim_canvas" width="400" height="400" style="border:4px solid blue"></canvas>
      <br />
      <button onclick="bubble_anim_anim = bubble_anim_init('bubble_anim')">Initialize</button>
      <button onclick="bubble_anim_anim.run('bubble_anim_anim')">Run</button>
      <button onclick="bubble_anim_anim.stop()">Stop</button> <br />
      <button onclick="bubble_anim_anim.begin()">Beginning</button>
      <button onclick="bubble_anim_anim.forward()">Step Forward</button>
      <button onclick="bubble_anim_anim.backward()">Step Backward</button>
      <button onclick="bubble_anim_anim.end()">End</button>
      <script>
        function bubble_anim_init(divid) {
          var a = new Animator(new BubbleSortModel(), new BarViewer(), divid);
          a.init();
          return a;
        }
      </script>
    </div>
</interactive>

<p>The following animation shows <c>bubbleSort</c> in action. The sort compares two
    items at a time. Once it finds two out of place blocks it will find the correct place
    for the smaller block and then resets for another pass through.</p>

<interactive>
    <div id="bubble_sort" class="video_popup runestone">
        <video controls="" preload="none" poster="pretext/_static/vis_bubble_sort_thumb.png">
          <source src="pretext/_static/vis_bubble_sort.webm" type="video/webm"></source>
          No supported video type
        </video>
      </div>
    <script>
        window.addEventListener('load', (event) => {
            jQuery(function($) {
                var rb = new RunestoneBase();
                $('#bubble_sort_thumb').click(function(e) {
                    $('#bubble_sort').show();
                    $('#bubble_sort_thumb').hide();
                    rb.logBookEvent({'event':'video','act':'play','div_id': 'bubble_sort'});
                });
                $('#bubble_sort video').one("click", function(){
                    this.play();
                });
                $('#bubble_sort video').one("play", function(){
                    rb.logBookEvent({'event':'video','act':'play','div_id': 'bubble_sort'});
                });
            });
        });
    </script>
</interactive>

  
  



        <!--For more detail, CodeLens 1 allows you to step through the algorithm.-->
        <!---->
        <!--.. codelens:: bubbletrace-->
        <!--:caption: Tracing the Bubble Sort-->
        <!---->
        <!--def bubbleSort(alist):-->
        <!--for passnum in range(len(alist)-1,0,-1):-->
        <!--for i in range(passnum):-->
        <!--if alist[i]>alist[i+1]:-->
        <!--temp = alist[i]-->
        <!--alist[i] = alist[i+1]-->
        <!--alist[i+1] = temp-->
        <!---->
        <!--alist = [54,26,93,17,77,31,44,55,20]-->
        <!--bubbleSort(alist)-->
        <!--print(alist)-->
        <p>This visualization allows you to step through the algorithm. Red bars represent
            the elements being looked at.</p>
        <p>To analyze the bubble sort, we should note that regardless of how the
            items are arranged in the initial array, <m>n-1</m> passes will be
            made to sort an array of size <em>n</em>. <xref ref="sort_id3"/> shows the number
            of comparisons for each pass. The total number of comparisons is the sum
            of the first <m>n-1</m> integers. Recall that the sum of the first
            <em>n</em> integers is <m>\frac{1}{2}n^{2} + \frac{1}{2}n</m>. The sum of
            the first <m>n-1</m> integers is
            <m>\frac{1}{2}n^{2} + \frac{1}{2}n - n</m>, which is
            <m>\frac{1}{2}n^{2} - \frac{1}{2}n</m>. This is still
            <m>O(n^{2})</m> comparisons. In the best case, if the array is already
            ordered, no exchanges will be made. However, in the worst case, every
            comparison will cause an exchange. On average, we exchange half of the
            time.</p>
        
        <table xml:id="sort_id3"><tabular>
            <title><term>Table 1: Comparisons for Each Pass of Bubble Sort</term></title>
            
                
                
                
                    <row header="yes">
                        <cell>
                            <term>Pass</term>
                        </cell>
                        <cell>
                            <term>Comparisons</term>
                        </cell>
                    </row>
                
                
                    <row>
                        <cell>
                            1
                        </cell>
                        <cell>
                            <m>n-1</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            2
                        </cell>
                        <cell>
                            <m>n-2</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            3
                        </cell>
                        <cell>
                            <m>n-3</m>
                        </cell>
                    </row>
                    <row>
                        <cell>
                            &#8230;
                        </cell>
                        <cell>
                            &#8230;
                        </cell>
                    </row>
                    <row>
                        <cell>
                            <m>n-1</m>
                        </cell>
                        <cell>
                            <m>1</m>
                        </cell>
                    </row>
                
            
        </tabular></table>
        <p>A bubble sort is often considered the most inefficient sorting method
            since it must exchange items before the final location is known. These
            <q>wasted</q> exchange operations are very costly. However, because the
            bubble sort makes passes through the entire unsorted portion of the
            array, it has the capability to do something most sorting algorithms
            cannot. In particular, if during a pass there are no exchanges, then we
            know that the array must be sorted. A bubble sort can be modified to stop
            early if it finds that the array has become sorted. This means that for
            arrays that require just a few passes, a bubble sort may have an
            advantage in that it will recognize the sorted array and stop.
            <xref ref="lst-shortbubbles_cpp"/> and <xref ref="lst-shortbubbles_py"/> shows this modification, which is often referred
            to as the <term>short bubble</term>.</p>

  <example xml:id="lst-shortbubbles_cpp">
   <title>Short Bubble Algorithm in C++</title>  
    
    <program xml:id="lst_shortbubbles_cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

vector&lt;int&gt; shortBubbleSort(vector&lt;int&gt; avector){ //the vector for bubble sort
    bool exchanges = true;
    int passnum = avector.size();
    //while vector size is greater than 0 and exchanges = true
    while (passnum &gt; 0 &amp;&amp; exchanges) {
        exchanges = false;
       //loops through vector, exchanging values until it reaches the end of vector.
        for(int i = 0; i &lt; passnum; i++){
            if(avector[i] &gt; avector[i+1]){
                exchanges = true;
                int temp = avector[i];
                avector[i] = avector[i+1];
                avector[i+1] = temp;
            }
        }
        //subtracts from the passnum variable so that the next passthrough is one less
        //than the previous, because the largest value has already 'bubbled' all the way up.
        passnum = passnum - 1;
    }
    return avector;
}

int main() {
    // Vector initialized using a static array
    static const int arr[] = {20,30,40,90,50,60,70,80,110,100};
    vector&lt;int&gt; avector (arr, arr+ sizeof(arr)/sizeof(arr[0])); //intializes vector

    vector&lt;int&gt; bvector = shortBubbleSort(avector);

    for(unsigned int i = 0; i &lt; bvector.size(); i++){
      cout&lt;&lt; bvector[i] &lt;&lt; " ";
    }
    return 0;
}
        </input>
    </program> 
    </example>
          
    <example xml:id="lst-shortbubbles_py">
        <title>Short Bubble Algorithm in Python</title>  
    <program xml:id="lst_shortbubble_py" interactive="activecode" language="python">
        <input>
def shortBubbleSort(alist):
    exchanges = True
    passnum = len(alist)-1
    while passnum &gt; 0 and exchanges:
       exchanges = False
       for i in range(passnum):
           if alist[i]&gt;alist[i+1]:
               exchanges = True
               temp = alist[i]
               alist[i] = alist[i+1]
               alist[i+1] = temp
       """subtracts from the passnum variable so that the next passthrough is one less
       than the previous, because the largest value has already 'bubbled' all the way up"""
       passnum = passnum-1

alist=[20,30,40,90,50,60,70,80,100,110]
shortBubbleSort(alist)
print(alist)
        </input>
    </program>
</example>
            
        <!--Finally, here is ``shortBubbleSort`` in CodeLens (CodeLens 2)..-->
        <!---->
        <!--.. codelens:: shortbubbletrace-->
        <!--:caption: Tracing the Short Bubble Sort-->
        <!---->
        <!--def shortBubbleSort(alist):-->
        <!--exchanges = True-->
        <!--passnum = len(alist)-1-->
        <!--while passnum > 0 and exchanges:-->
        <!--exchanges = False-->
        <!--for i in range(passnum):-->
        <!--if alist[i]>alist[i+1]:-->
        <!--exchanges = True-->
        <!--temp = alist[i]-->
        <!--alist[i] = alist[i+1]-->
        <!--alist[i+1] = temp-->
        <!--passnum = passnum-1-->
        <!---->
        <!--alist=[20,30,40,90,50,60,70,80,100,110]-->
        <!--shortBubbleSort(alist)-->
        <!--print(alist)-->
        <reading-questions xml:id="rq-buble-sort">
    <exercise label="question_sort_1">
        <statement>

            <p>Suppose you have the following array of numbers to sort:
                [19, 1, 9, 7, 3, 10, 13, 15, 8, 12]. Which array represents the partially sorted list after three complete passes of bubble sort?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>[1, 9, 19, 7, 3, 10, 13, 15, 8, 12]</p>
                </statement>
                <feedback>
                    <p>This answer represents three swaps.  A pass means that you continue swapping all the way to the end of the list.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>[1, 3, 7, 9, 10, 8, 12, 13, 15, 19]</p>
                </statement>
                <feedback>
                    <p>Very Good</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 7, 3, 9, 10, 13, 8, 12, 15, 19]</p>
                </statement>
                <feedback>
                    <p>A bubble sort contines to swap numbers up to index position passnum.  But remember that passnum starts at the length of the list - 1.</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>[1, 9, 19, 7, 3, 10, 13, 15, 8, 12]</p>
                </statement>
                <feedback>
                    <p>You have been doing an insertion sort, not a bubble sort.</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions> 
    </section>

