<section xml:id="trees_nodes-and-references">
        <title>Nodes and References</title>
        <p>Our second method to represent a tree uses nodes and references. In this
            case we will define a class that has attributes for the root value, as
            well as the left and right subtrees. Since this representation more
            closely follows the object-oriented programming paradigm, we will
            continue to use this representation for the remainder of the chapter.</p>
        <p>Using nodes and references, we might think of the tree as being
            structured like the one shown in <xref ref="fig-treerec"/>.</p>
        
        <figure align="center" xml:id="fig-treerec">
            <caption>A Simple Tree Using a Nodes and References Approach</caption>
                <image source="Trees/treerecs.png" width="50%">
                <description>Illustration of a binary tree structure with three levels. The top level shows a single node labeled 'a' with two pointers 'left' and 'right'. The second level has two nodes: 'b' on the left with its own 'left' and 'right' pointers, and 'c' on the right with pointers also labeled 'left' and 'right'. The third level shows three nodes: 'd' is the left child of 'b' with 'left' and 'right' pointers; 'e' is the right child of 'b' with pointers labeled 'left' and 'right'; 'f' is the right child of 'c' also with 'left' and 'right' pointers. Each pointer is represented by an arrow indicating the direction of the reference. </description>
                </image>
            </figure>
        <p>We will start out with a simple class definition for the nodes and
            references approach as shown in <xref ref="trees_lst-nar"/>. The important thing
            to remember about this representation is that the attributes <c>left</c>
            and <c>right</c> will become references to other instances of the
            <c>BinaryTree</c> class. For example, when we insert a new left child into
            the tree we create another instance of <c>BinaryTree</c> and modify
            <c>self.leftChild</c> in the root to reference the new tree.</p>
        
        <p xml:id="trees_lst-nar" names="lst_nar"><term>Listing 4</term></p>
        <p><term>C++ Implementation</term></p>
        <pre>#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
using namespace std;

class BinaryTree {

    private:
    char key;
    BinaryTree *leftChild;
    BinaryTree *rightChild;

    public:
    BinaryTree(char rootObj){
        this-&gt;key = rootObj;
        this-&gt;leftChild = NULL;
        this-&gt;rightChild = NULL;
    }</pre>
        <p><term>Python Implementation</term></p>
        <pre>class BinaryTree:
    def __init__(self,rootObj):
        self.key = rootObj
        self.leftChild = None
        self.rightChild = None</pre>
        <p>Notice that in <xref ref="trees_lst-nar"/>, the constructor function expects to
            get some kind of object to store in the root. Just like you can store
            any object you like in an array, the root object of a tree can be a
            reference to any object. For our early examples, we will store the name
            of the node as the root value. Using nodes and references to represent
            the tree in <xref ref="fig-treerec"/>, we would create six instances of the
            BinaryTree class.</p>
        <p>Next let's look at the functions we need to build the tree beyond the
            root node. To add a left child to the tree, we will create a new binary
            tree object and set the <c>left</c> attribute of the root to refer to this
            new object. The code for <c>insertLeft</c> is shown in
            <xref ref="trees_lst-insl"/>.</p>
        
        <p xml:id="trees_lst-insl" names="lst_insl"><term>Listing 5</term></p>
        <p><term>C++ Implementation</term></p>
        <program language="python"><input>
void insertLeft(char newNode){
    if (this-&gt;leftChild == NULL){
    this-&gt;leftChild = new BinaryTree(newNode);
    }
    else {
    BinaryTree *t = new BinaryTree(newNode);
    t-&gt;leftChild = this-&gt;leftChild;
    this-&gt;leftChild = t;
    }
}
</input></program>
        <p><term>Python Implementation</term></p>
        <program language="python"><input>
def insertLeft(self,newNode):
    if self.leftChild == None:
        self.leftChild = BinaryTree(newNode)
    else:
        t = BinaryTree(newNode)
        t.leftChild = self.leftChild
        self.leftChild = t
</input></program>
        <p>We must consider two cases for insertion. The first case is
            characterized by a node with no existing left child. When there is no
            left child, simply add a node to the tree. The second case is
            characterized by a node with an existing left child. In the second
            case, we insert a node and push the existing child down one level in the
            tree. The second case is handled by the <c>else</c> statement on line
            4 of <xref ref="trees_lst-insl"/>.</p>
        <p>The code for <c>insertRight</c> must consider a symmetric set of cases.
            There will either be no right child, or we must insert the node between
            the root and an existing right child. The insertion code is shown in
            <xref ref="trees_lst-insr"/>.</p>
        
        <p xml:id="trees_lst-insr" names="lst_insr"><term>Listing 6</term></p>
        <p><term>C++ Implementation</term></p>
        <program language="python"><input>
void insertRight(char newNode){
    if (this-&gt;rightChild == NULL){
    this-&gt;rightChild = new BinaryTree(newNode);
    }
    else {
    BinaryTree *t = new BinaryTree(newNode);
    t-&gt;rightChild = this-&gt;rightChild;
    this-&gt;rightChild = t;
    }
}
</input></program>
        <p><term>Python Implementation</term></p>
        <program language="python"><input>
def insertRight(self,newNode):
    if self.rightChild == None:
        self.rightChild = BinaryTree(newNode)
    else:
        t = BinaryTree(newNode)
        t.rightChild = self.rightChild
        self.rightChild = t
</input></program>
        <p>To round out the definition for a simple binary tree data structure, we
            will write accessor methods (see <xref ref="trees_lst-naracc"/>) for the left and right children, as well as
            the root values.</p>
        
        <p xml:id="trees_lst-naracc" names="lst_naracc"><term>Listing 7</term></p>
        <p><term>C++ Implementation</term></p>
        <program language="python"><input>
BinaryTree *getRightChild(){
    return this-&gt;rightChild;
}

BinaryTree *getLeftChild(){
    return this-&gt;leftChild;
}

void setRootVal(char obj){
    this-&gt;key = obj;
}

char getRootVal(){
    return this-&gt;key;
}
</input></program>
        <p><term>Python Implementation</term></p>
        <program language="python"><input>
def getRightChild(self):
    return self.rightChild

def getLeftChild(self):
    return self.leftChild

def setRootVal(self,obj):
    self.key = obj

def getRootVal(self):
    return self.key
</input></program>
        <p>Now that we have all the pieces to create and manipulate a binary tree,
            let's use them to check on the structure a bit more. Let's make a simple
            tree with node a as the root, and add nodes b and c as children. <xref ref="bintree_cpp"/> and <xref ref="bintree_py"/> creates the tree and looks at the some of the
            values stored in <c>key</c>, <c>left</c>, and <c>right</c>. Notice that both the
            left and right children of the root are themselves distinct instances of
            the <c>BinaryTree</c> class. As we said in our original recursive
            definition for a tree, this allows us to treat any child of a binary
            tree as a binary tree itself.</p>
        
<example xml:id="bintree_cpp">
<title> C++ Implementation </title>
    <program xml:id="bintree-cpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
using namespace std;

//creates a binary tree, allows you to insert nodes
// and access those nodes.
class BinaryTree {

    private:
    char key;
    BinaryTree *leftChild;  // reference other instances of the binary tree the BinaryTree class
    BinaryTree *rightChild; // reference other instances of the binary tree the BinaryTree class

    public: //constructor function expects to get some kind of object to store in the root
    BinaryTree(char rootObj){
        this-&gt;key = rootObj;
        this-&gt;leftChild = NULL;
        this-&gt;rightChild = NULL;
    }

    void insertLeft(char newNode){ // Handles insertion if there is no left child simply adds a node to the tree.
        if (this-&gt;leftChild == NULL){
        this-&gt;leftChild = new BinaryTree(newNode);
        }
        else { // handles insertion if there is a left child pushes the existing child down one level in the tree.
        BinaryTree *t = new BinaryTree(newNode);
        t-&gt;leftChild = this-&gt;leftChild;
        this-&gt;leftChild = t;
        }
    }

    void insertRight(char newNode){
        if (this-&gt;rightChild == NULL){
        this-&gt;rightChild = new BinaryTree(newNode);
        }
        else {
        BinaryTree *t = new BinaryTree(newNode);
        t-&gt;rightChild = this-&gt;rightChild;
        this-&gt;rightChild = t;
        }
    }

    BinaryTree *getRightChild(){ // accessor method
        return this-&gt;rightChild;
    }

    BinaryTree *getLeftChild(){ // accessor method
        return this-&gt;leftChild;
    }

    void setRootVal(char obj){ // accessor method
        this-&gt;key = obj;
    }

    char getRootVal(){ // accessor method
        return this-&gt;key;
    }
};

int main() {
    BinaryTree *r = new BinaryTree('a');
    cout &lt;&lt; r-&gt;getRootVal() &lt;&lt; endl;
    cout &lt;&lt; r-&gt;getLeftChild() &lt;&lt; endl;
    r-&gt;insertLeft('b');
    cout &lt;&lt; r-&gt;getLeftChild() &lt;&lt; endl;
    cout &lt;&lt; r-&gt;getLeftChild()-&gt;getRootVal() &lt;&lt; endl;
    r-&gt;insertRight('c');
    cout &lt;&lt; r-&gt;getRightChild() &lt;&lt; endl;
    cout &lt;&lt; r-&gt;getRightChild()-&gt;getRootVal() &lt;&lt; endl;
    r-&gt;getRightChild()-&gt;setRootVal('d');
    cout &lt;&lt; r-&gt;getRightChild()-&gt;getRootVal() &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
</example>

    
    <example xml:id="bintree_py">
    <title> Python Implementation </title>

    <program xml:id="bintree-py" interactive="activecode" language="python">
        <input>
""" creates a binary tree, allows you to insert nodes
 and access those nodes. """
class BinaryTree:
    def __init__(self,rootObj): # initializer function expects to get some kind of object to store in the root
        self.key = rootObj
        self.leftChild = None  # reference other instances of the binary tree the BinaryTree class
        self.rightChild = None # reference other instances of the binary tree the BinaryTree class

    def insertLeft(self,newNode): # Handles insertion if there is no left child simply adds a node to the tree.
        if self.leftChild == None:
            self.leftChild = BinaryTree(newNode)
        else:
            t = BinaryTree(newNode) # handles insertion if there is a left child pushes the existing child down one level in the tree.
            t.leftChild = self.leftChild
            self.leftChild = t

    def insertRight(self,newNode): # Handles insertion if there is no right child simply adds a node to the tree
        if self.rightChild == None:
            self.rightChild = BinaryTree(newNode)
        else: # handles insertion if there is a right child pushes the existing child down one level in the tree.
            t = BinaryTree(newNode)
            t.rightChild = self.rightChild
            self.rightChild = t


    def getRightChild(self): # accessor method
        return self.rightChild

    def getLeftChild(self): # accessor method
        return self.leftChild

    def setRootVal(self,obj): # accessor method
        self.key = obj

    def getRootVal(self): # accessor method
        return self.key


def main():
    r = BinaryTree('a')
    print(r.getRootVal())
    print(r.getLeftChild())
    r.insertLeft('b')
    print(r.getLeftChild())
    print(r.getLeftChild().getRootVal())
    r.insertRight('c')
    print(r.getRightChild())
    print(r.getRightChild().getRootVal())
    r.getRightChild().setRootVal('d')
    print(r.getRightChild().getRootVal())
main()
        </input>
    </program>
</example>
<reading-questions xml:id="rq-nodes-and-references">
    <title>Reading Question</title>
    <exercise label="treeLike">
        <statement>

        <p>Which data structure resembles the above implementation of a tree?</p>

        </statement>
<choices>

            <choice>
                <statement>
                    <p>Hash Table</p>
                </statement>
                <feedback>
                    <p>Incorrect, a hash table maps key, value pairs for quick access. To access an item in our tree, we have to go through everything before it.</p>
                </feedback>
            </choice>

            <choice correct="yes">
                <statement>
                    <p>Linked List</p>
                </statement>
                <feedback>
                    <p>Correct, this tree is essentially a linked list connecting other linked lists</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Queue</p>
                </statement>
                <feedback>
                    <p>Incorrect, a queue is good for putting data in to fit a FIFO sequence</p>
                </feedback>
            </choice>

            <choice>
                <statement>
                    <p>Stack</p>
                </statement>
                <feedback>
                    <p>Incorrect, a stack is good for putting data in to fit a LIFO sequence</p>
                </feedback>
            </choice>
</choices>

    </exercise>
</reading-questions>
    </section>

