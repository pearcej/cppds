<section xml:id="trees_vocabulary-and-definitions">
    <title>Vocabulary and Definitions</title>
    <p>Now that we have looked at examples of trees, we will formally define a
        tree and its components.</p>
    <dl>
        <li>
            <title>Node</title>
            <idx><h>Tree Components</h><h>node</h></idx>
                <p>A <term>node</term> is a fundamental part of a tree. It can have a name, which we
                    call the <q>key.</q> A node may also have additional information. We call
                    this additional information the <q>payload.</q> While the payload
                    information is not central to many tree algorithms, it is often
                    critical in applications that make use of trees.</p>
            
        </li>
        <li>
            <title>Edge</title>
            <idx><h>Tree Components</h><h>edge</h></idx>
                <p>An <term>edge</term> is another fundamental part of a tree. An edge connects two
                    nodes to show that there is a relationship between them. Every node
                    (except the root) is connected by exactly one incoming edge from
                    another node. Each node may have several outgoing edges.</p>
            
        </li>
        <li>
            <title>Root</title>
            <idx><h>Tree Components</h><h>root</h></idx>
                <p>The <term>root</term> of the tree is the only node in the tree that has no
                    incoming edges. In <xref ref="trees_examplesof-trees"/>, / is the root of the tree.</p>
            
        </li>
        <li>
            <title>Path</title>
            <idx><h>Tree Components</h><h>path</h></idx>
                <p>A <term>path</term> is an ordered list of nodes that are connected by edges. For
                    example,
                    Mammal <math>\rightarrow</math> Carnivora <math>\rightarrow</math> Felidae <math>\rightarrow</math> Felis <math>\rightarrow</math> Domestica
                    is a path.</p>
            
        </li>
        <li>
            <title>Children</title>
            <idx><h>Tree Components</h><h>children</h></idx>
                <p>The set of nodes <math>c</math> that have incoming edges from the same
                    node to are said to be the children of that node. In
                    <xref ref="trees_examplesof-trees"/>, nodes log/, spool/, and yp/ are the children of node
                    var/.</p>
            
        </li>
        <li>
            <title>Parent</title>
            <idx><h>Tree Components</h><h>parent</h></idx>
                <p>A node is the <term>parent</term> of all the nodes it connects to with outgoing
                    edges. In <xref ref="trees_examplesof-trees"/> the node var/ is the parent of nodes
                    log/, spool/, and yp/.</p>
            
        </li>
        <li>
            <title>Sibling</title>
            <idx><h>Tree Components</h><h>siblings</h></idx>
                <p>Nodes in the tree that are children of the same parent are said to
                    be <term>siblings</term>. The nodes etc/ and usr/ are siblings in the filesystem
                    tree.</p>
            
        </li>
        <li>
            <title>Subtree</title>
            <idx><h>Tree Components</h><h>subtree</h></idx>
                <p>A <term>subtree</term> is a set of nodes and edges comprised of a parent and all
                    the descendants of that parent.</p>
            
        </li>
        <li>
            <title>Leaf Node</title>
            <idx><h>Tree Components</h><h>leaf node</h></idx>
                <p>A <term>leaf node</term> is a node that has no children. For example, Human and
                    Chimpanzee are leaf nodes in <xref ref="trees_examplesof-trees"/>.</p>
            
        </li>
        <li>
            <title>Level</title>
            <idx><h>Tree Components</h><h>level</h></idx>
                <p>The <term>level</term> of a node <math>n</math> is the number of edges on the path
                    from the root node to <math>n</math>. For example, the level of the
                    Felis node in <xref ref="trees_examplesof-trees"/> is five. By definition, the level
                    of the root node is zero.</p>
            
        </li>
        <li>
            <title>Height</title>
            <idx><h>Tree Components</h><h>height</h></idx>
                <p>The <term>height</term> of a tree is equal to the maximum level of any node in
                    the tree. The height of the tree in <xref ref="trees_examplesof-trees"/> is two.</p>
            
        </li>
    </dl>
    <p>With the basic vocabulary now defined, we can move on to a formal
        definition of a tree. In fact, we will provide two definitions of a
        tree. One definition involves nodes and edges. The second definition,
        which will prove to be very useful, is a recursive definition.</p>
    <p><em>Definition One:</em> A tree consists of a set of nodes and a set of
        edges that connect pairs of nodes. A tree has the following properties:</p>
    <p><ul>
        <li>
            <p>One node of the tree is designated as the root node.</p>
        </li>
        <li>
            <p>Every node <math>n</math>, except the root node, is connected by an edge
                from exactly one other node <math>p</math>, where <math>p</math> is the
                parent of <math>n</math>.</p>
        </li>
        <li>
            <p>A unique path traverses from the root to each node.</p>
        </li>
        <li>
            <p>If each node in the tree has a maximum of two children, we say that
                the tree is a <term>binary tree</term>.</p>
        </li>
    </ul></p>
    <p><xref ref="fig-nodeedgetree"/> illustrates a tree that fits definition one.
        The arrowheads on the edges indicate the direction of the connection.</p>
    
    <figure align="center" xml:id="fig-nodeedgetree"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: A Tree Consisting of a Set of Nodes and Edges</caption><image source="Trees/Figures/treedef1.png" width="50%" alt="image"/></figure>
    <p><em>Definition Two:</em> A tree is either empty or consists of a root and zero
        or more subtrees, each of which is also a tree. The root of each subtree
        is connected to the root of the parent tree by an edge.
        <xref ref="fig-recursivetree"/> illustrates this recursive definition of a tree.
        Using the recursive definition of a tree, we know that the tree in
        <xref ref="fig-recursivetree"/> has at least four nodes, since each of the
        triangles representing a subtree must have a root. It may have many more
        nodes than that, but we do not know unless we look deeper into the tree.</p>
    
    <figure align="center" xml:id="fig-recursivetree"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: A recursive Definition of a tree</caption><image source="Trees/Figures/TreeDefRecursive.png" width="50%" alt="image"/></figure>

<exercise label="treeDefinition">
<statement>
    <p>Q-1: In your own words, define a tree relative to the first definition provided above.</p>

</statement>
</exercise> 
</section>