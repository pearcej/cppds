<section xml:id="trees_discussion-questions">
        <title>Discussion Questions</title>
        <p><ol label="1">
            <li>
                <p>Draw the tree structure resulting from the following set of tree
                    function calls:</p>
                <pre>&gt;&gt;&gt; r = BinaryTree(3)
&gt;&gt;&gt; insertLeft(r,4)
[3, [4, [], []], []]
&gt;&gt;&gt; insertLeft(r,5)
[3, [5, [4, [], []], []], []]
&gt;&gt;&gt; insertRight(r,6)
[3, [5, [4, [], []], []], [6, [], []]]
&gt;&gt;&gt; insertRight(r,7)
[3, [5, [4, [], []], []], [7, [], [6, [], []]]]
&gt;&gt;&gt; setRootVal(r,9)
&gt;&gt;&gt; insertLeft(r,11)
[9, [11, [5, [4, [], []], []], []], [7, [], [6, [], []]]]</pre>
            </li>
            <li>
                <p>Trace the algorithm for creating an expression tree for the
                    expression <m>(4 * 8) / 6 - 3</m>.</p>
            </li>
            <li>
                <p>Consider the following array of integers: [1,2,3,4,5,6,7,8,9,10]. Show
                    the binary search tree resulting from inserting the integers in the
                    array.</p>
            </li>
            <li>
                <p>Consider the following array of integers: [10,9,8,7,6,5,4,3,2,1]. Show
                    the binary search tree resulting from inserting the integers in the
                    array.</p>
            </li>
            <li>
                <p>Generate a random array of integers. Show the binary heap tree
                    resulting from inserting the integers on the array one at a time.</p>
            </li>
            <li>
                <p>Using the array from the previous question, show the binary heap tree
                    resulting from using the array as a parameter to the <c>buildHeap</c>
                    method. Show both the tree and array form.</p>
            </li>
            <li>
                <p>Draw the binary search tree that results from inserting the following
                    keys in the order given: 68,88,61,89,94,50,4,76,66, and 82.</p>
            </li>
            <li>
                <p>Generate a random array of integers. Draw the binary search tree
                    resulting from inserting the integers on the array.</p>
            </li>
            <li>
                <p>Consider the following array of integers: [1,2,3,4,5,6,7,8,9,10]. Show
                    the binary heap resulting from inserting the integers one at a time.</p>
            </li>
            <li>
                <p>Consider the following array of integers: [10,9,8,7,6,5,4,3,2,1]. Show
                    the binary heap resulting from inserting the integers one at a time.</p>
            </li>
            <li>
                <p>Consider the two different techniques we used for implementing traversals of a binary
                    tree. Why must we check before the call to <c>preorder</c> when
                    implementing as a method, whereas we could check inside the call when
                    implementing as a function?</p>
            </li>
        </ol></p>
        <p><ol label="1">
            <li>
                <p>Show the function calls needed to build the following binary tree.</p>
            </li>
        </ol></p>
        <figure align="center" ><image source="Trees/Figures/exerTree.png" width="50%"/></figure>
        <p><ol label="1">
            <li>
                <p>Given the following tree, perform the appropriate rotations to bring it back into balance.</p>
            </li>
        </ol></p>
        <figure align="center" ><image source="Trees/Figures/rotexer1.png" width="50%"/></figure>
        <p><ol label="1">
            <li>
                <p>Using the following as a starting point, derive the equation that gives the updated balance factor for node D.</p>
            </li>
        </ol></p>
        <figure align="center" ><image source="Trees/Figures/bfderive.png" width="50%"/></figure>
    </section>

