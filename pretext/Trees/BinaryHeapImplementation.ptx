<section xml:id="trees_binary-heap-implementation">
        <title>Binary Heap Implementation</title>
        <subsection xml:id="trees_the-structure-property">
            <title>The Structure Property</title>
            <p><idx>complete binary tree</idx>In order to make our heap work efficiently, we will take advantage of
                the logarithmic nature of the binary tree to represent our heap. In order to guarantee logarithmic
                performance, we must keep our tree balanced. A balanced binary tree has
                roughly the same number of nodes in the left and right subtrees of the
                root. In our heap implementation we keep the tree balanced by creating a
                <term>complete binary tree</term>. A complete binary tree is a tree in which each
                level has all of its nodes. The exception to this is the bottom level of
                the tree, which we fill in from left to right. <xref ref="fig-comptree"/>
                shows an example of a complete binary tree.</p>
            
            <figure align="center" xml:id="fig-comptree"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 1: A Complete Binary Tree</caption><image source="Trees/Figures/compTree.png" width="50%" alt="image"/></figure>
            <p>Another interesting property of a complete tree is that we can represent
                it using a single vector. We do not need to use nodes and references or
                even vectors of vectors. Because the tree is complete, the left child of a
                parent (at position <math>p</math>) is the node that is found in position
                <math>2p</math> in the vector. Similarly, the right child of the parent is at
                position <math>2p + 1</math> in the vector. To find the parent of any node in
                the tree, we can simply use Python's integer division. Given that a node
                is at position <math>n</math> in the vector, the parent is at position
                <math>n/2</math>. <xref ref="fig-heaporder"/> shows a complete binary tree
                and also gives the vector representation of the tree.  Note the <math>2p</math> and <math>2p+1</math> relationship between
                parent and children. The vector
                representation of the tree, along with the full structure property,
                allows us to efficiently traverse a complete binary tree using only a
                few simple mathematical operations. We will see that this also leads to
                an efficient implementation of our binary heap.</p>
        </subsection>
        <subsection xml:id="trees_the-heap-order-property">
            <title>The Heap Order Property</title>
            <p><idx>heap order property</idx>The method that we will use to store items in a heap relies on
                maintaining the heap order property. The <term>heap order property</term> is as
                follows: In a heap, for every node <math>x</math> with parent <math>p</math>,
                the key in <math>p</math> is smaller than or equal to the key in
                <math>x</math>. <xref ref="fig-heaporder"/> also illustrates a complete binary
                tree that has the heap order property.</p>
            
            <figure align="center" xml:id="fig-heaporder"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: A Complete Binary Tree, along with its Vector Representation</caption><image source="Trees/Figures/heapOrder.png" width="50%" alt="image"/></figure>
        </subsection>
        <subsection xml:id="trees_heap-operations">
            <title>Heap Operations</title>
            <p>We will begin our implementation of a binary heap with the constructor.
                Since the entire binary heap can be represented by a single vector, all
                the constructor will do is initialize the vector and an attribute
                <c>currentSize</c> to keep track of the current size of the heap.
                <xref ref="lst-heap1a"/> shows the C++ code for the constructor. You
                will notice that an empty binary heap has a single zero as the first
                element of <c>heapList</c> and that this zero is not used, but is there so
                that simple integer division can be used in later methods.</p>
            
            <p xml:id="trees_lst-heap1a" names="lst_heap1a"><term>Listing 1</term></p>
            <pre>class BinHeap{
    private:
        vector&lt;int&gt; heapvector;
        int currentSize;

    public:
        BinHeap(vector&lt;int&gt; heapvector){
            this-&gt;heapvector = heapvector;
            this-&gt;currentSize = 0;
        }
}</pre>
            <p>The next method we will implement is <c>insert</c>. The easiest, and most
                efficient, way to add an item to a vector is to simply append the item to
                the end of the vector. The good news about appending is that it guarantees
                that we will maintain the complete tree property. The bad news about
                appending is that we will very likely violate the heap structure
                property. However, it is possible to write a method that will allow us
                to regain the heap structure property by comparing the newly added item
                with its parent. If the newly added item is less than its parent, then
                we can swap the item with its parent. <xref ref="fig-percup"/> shows the
                series of swaps needed to percolate the newly added item up to its
                proper position in the tree.</p>
            
            <figure align="center" xml:id="id3"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 2: Percolate the New Node up to Its Proper Position</caption><image source="Trees/Figures/percUp.png" width="50%" alt="image"/></figure>
            <p>Notice that when we percolate an item up, we are restoring the heap
                property between the newly added item and the parent. We are also
                preserving the heap property for any siblings. Of course, if the newly
                added item is very small, we may still need to swap it up another level.
                In fact, we may need to keep swapping until we get to the top of the
                tree. <xref ref="lst-heap2"/> shows the <c>percUp</c> method, which
                percolates a new item as far up in the tree as it needs to go to
                maintain the heap property. Here is where our wasted element in
                <c>heapvector</c> is important. Notice that we can compute the parent of any
                node by using simple integer division. The parent of the current node
                can be computed by dividing the index of the current node by 2.</p>
            <p>We are now ready to write the <c>insert</c> method (see <xref ref="lst-heap3"/>). Most of the work in the
                <c>insert</c> method is really done by <c>percUp</c>. Once a new item is
                appended to the tree, <c>percUp</c> takes over and positions the new item
                properly.</p>
            
            <p xml:id="trees_lst-heap2" names="lst_heap2"><term>Listing 2</term></p>
            <pre>void percUp(int i){
    while ((i / 2) &gt; 0){
        if (this-&gt;heapvector[i] &lt; this-&gt;heapvector[i/2]){
            int tmp = this-&gt;heapvector[i/2];
            this-&gt;heapvector[i/2] = this-&gt;heapvector[i];
            this-&gt;heapvector[i] = tmp;
        }
        i = i/2;
    }
}</pre>
            
            <p xml:id="trees_lst-heap3" names="lst_heap3"><term>Listing 3</term></p>
            <pre>void insert(int k){
    this-&gt;heapvector.push_back(k);
    this-&gt;currentSize = this-&gt;currentSize + 1;
    this-&gt;percUp(this-&gt;currentSize);
}</pre>
            <p>With the <c>insert</c> method properly defined, we can now look at the
                <c>delMin</c> method. Since the heap property requires that the root of the
                tree be the smallest item in the tree, finding the minimum item is easy.
                The hard part of <c>delMin</c> is restoring full compliance with the heap
                structure and heap order properties after the root has been removed. We
                can restore our heap in two steps. First, we will restore the root item
                by taking the last item in the vector and moving it to the root position.
                Moving the last item maintains our heap structure property. However, we
                have probably destroyed the heap order property of our binary heap.
                Second, we will restore the heap order property by pushing the new root
                node down the tree to its proper position. <xref ref="fig-percdown"/> shows
                the series of swaps needed to move the new root node to its proper
                position in the heap.</p>
            
            <figure align="center" xml:id="id4"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 3: Percolating the Root Node down the Tree</caption><image source="Trees/Figures/percDown.png" width="50%" alt="image"/></figure>
            <p>In order to maintain the heap order property, all we need to do is swap
                the root with its smallest child less than the root. After the initial
                swap, we may repeat the swapping process with a node and its children
                until the node is swapped into a position on the tree where it is
                already less than both children. The code for percolating a node down
                the tree is found in the <c>percDown</c> and <c>minChild</c> methods in
                <xref ref="lst-heap4"/>.</p>
            
            <p xml:id="trees_lst-heap4" names="lst_heap4"><term>Listing 4</term></p>
            <pre>void percDown(int i){
    while ((i*2) &lt;= this-&gt;currentSize){
        int mc = this-&gt;minChild(i);
        if (this-&gt;heapvector[i] &gt; this-&gt;heapvector[mc]){
            int tmp = this-&gt;heapvector[i];
            this-&gt;heapvector[i] = this-&gt;heapvector[mc];
            this-&gt;heapvector[mc] = tmp;
        }
        i = mc;
    }
}

int minChild(int i){
    if (((i*2)+1) &gt; this-&gt;currentSize){
        return i * 2;
    }
    else{
        if (this-&gt;heapList[i*2] &lt; this-&gt;heapList[(i*2)+1]){
            return i * 2;
        }
        else{
            return (i * 2) + 1;
        }
    }
}</pre>
            <p>The code for the <c>delmin</c> operation is in <xref ref="lst-heap5"/>. Note
                that once again the hard work is handled by a helper function, in this
                case <c>percDown</c>.</p>
            
            <p xml:id="trees_lst-heap5" names="lst_heap5"><term>Listing 5</term></p>
            <pre>int delMin(){
    if (this-&gt;currentSize &gt; 1){
        int retval = this-&gt;heapvector[1];
        this-&gt;heapvector[1] = this-&gt;heapvector[this-&gt;currentSize];
        this-&gt;currentSize = this-&gt;currentSize - 1;
        this-&gt;heapvector.pop_back();
        this-&gt;percDown(1);
        return retval;
    }
    else{
        int retval = this-&gt;heapvector[0];
        this-&gt;heapvector[1] = this-&gt;heapvector[this-&gt;currentSize];
        this-&gt;currentSize = this-&gt;currentSize - 1;
        this-&gt;heapvector.pop_back();
        this-&gt;percDown(1);
        return retval;
    }
}</pre>
            <p>To finish our discussion of binary heaps, we will look at a method to
                build an entire heap from a vector of keys. The first method you might
                think of may be like the following. Given a vector of keys, you could
                easily build a heap by inserting each key one at a time. Since you are
                starting with a vector of one item, the vector is sorted and you could use
                binary search to find the right position to insert the next key at a
                cost of approximately <math>O(\log{n})</math> operations. However, remember
                that inserting an item in the middle of the vector may require
                <math>O(n)</math> operations to shift the rest of the vector over to make
                room for the new key. Therefore, to insert <math>n</math> keys into the
                heap would require a total of <math>O(n \log{n})</math> operations.
                However, if we start with an entire vector then we can build the whole
                heap in <math>O(n)</math> operations. <xref ref="lst-heap6"/> shows the code
                to build the entire heap.</p>
            
            <p xml:id="trees_lst-heap6" names="lst_heap6"><term>Listing 6</term></p>
            <pre>void buildheap(vector&lt;int&gt; avector){
    int i = avector.size() / 2;
    this-&gt;currentSize = avector.size();
    this-&gt;heapvector = avector;
    while (i &gt; 0){
        this-&gt;percDown(i);
        i = i - 1;
    }
}</pre>
            
            <figure align="center" xml:id="id5"><caption xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">Figure 4: Building a Heap from the vector [9, 6, 5, 2, 3]</caption><image source="Trees/Figures/buildheap.png" width="50%" alt="image"/></figure>
            <p><xref ref="fig-buildheap"/> shows the swaps that the <c>buildHeap</c> method
                makes as it moves the nodes in an initial tree of [9, 6, 5, 2, 3] into
                their proper positions. Although we start out in the middle of the tree
                and work our way back toward the root, the <c>percDown</c> method ensures
                that the largest child is always moved down the tree. Because the heap is a
                complete binary tree, any nodes past the halfway point will be leaves
                and therefore have no children. Notice that when <c>i=1</c>, we are
                percolating down from the root of the tree, so this may require multiple
                swaps. As you can see in the rightmost two trees of
                <xref ref="fig-buildheap"/>, first the 9 is moved out of the root position,
                but after 9 is moved down one level in the tree, <c>percDown</c> ensures
                that we check the next set of children farther down in the tree to
                ensure that it is pushed as low as it can go. In this case it results in
                a second swap with 3. Now that 9 has been moved to the lowest level of
                the tree, no further swapping can be done. It is useful to compare the
                vector representation of this series of swaps as shown in
                <xref ref="fig-buildheap"/> with the tree representation.</p>
            <pre>i = 2  [0, 9, 5, 6, 2, 3]
i = 1  [0, 9, 2, 6, 5, 3]
i = 0  [0, 2, 3, 6, 5, 9]</pre>
            <p>The complete binary heap implementation can be seen in ActiveCode 1.</p>
            <exercise ><TabNode tabname="C++" tabnode_options="{'subchapter': 'BinaryHeapImplementation', 'chapter': 'Trees', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'C++'}">

    <program xml:id="completeheapcpp" interactive="activecode" language="cpp">
        <input>
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;

// uses a vector to creat a Binar Heap
class BinHeap{

private:
    vector&lt;int&gt; heapvector;
    int currentSize;

public:
    // initializes the vector and an attribute currentSize
    // as 0 to allow for interger division.
    BinHeap(vector&lt;int&gt; heapvector){
        this-&gt;heapvector = heapvector;
        this-&gt;currentSize = 0;
    }

    // prelocates and item as far up in the
    // tree as possible to maintain
    // the Heap property
    void percUp(int i){
        while ((i / 2) &gt; 0){
            if (this-&gt;heapvector[i] &lt; this-&gt;heapvector[i/2]){
                int tmp = this-&gt;heapvector[i/2];
                this-&gt;heapvector[i/2] = this-&gt;heapvector[i];
                this-&gt;heapvector[i] = tmp;
            }
            i = i/2;
        }

    }

    // appends item to the end of the vector
    void insert(int k){
        this-&gt;heapvector.push_back(k);
        this-&gt;currentSize = this-&gt;currentSize + 1;
        this-&gt;percUp(this-&gt;currentSize);
    }

    // prelocates and item as far up in the
    // tree as possible to maintain
    // the Heap property
    void percDown(int i){
        while ((i*2) &lt;= this-&gt;currentSize){
            int mc = this-&gt;minChild(i);
            if (this-&gt;heapvector[i] &gt; this-&gt;heapvector[mc]){
                int tmp = this-&gt;heapvector[i];
                this-&gt;heapvector[i] = this-&gt;heapvector[mc];
                this-&gt;heapvector[mc] = tmp;
            }
            i = mc;
        }
    }

    int minChild(int i){
        if (((i*2)+1) &gt; this-&gt;currentSize){
            return i * 2;
        }
        else{
            if (this-&gt;heapvector[i*2] &lt; this-&gt;heapvector[(i*2)+1]){
                return i * 2;
            }
            else{
                return (i * 2) + 1;
            }
        }
    }

    // restores full complince with the heap structure
    // and heap order properties after the root is removed
    // by  taking the last item and moving it to the root position
    // and pushing the new root node down the tree to its proper postion.
    int delMin(){
        int retval = this-&gt;heapvector[1];
        this-&gt;heapvector[1] = this-&gt;heapvector[this-&gt;currentSize];
        this-&gt;currentSize = this-&gt;currentSize - 1;
        this-&gt;heapvector.pop_back();
        this-&gt;percDown(1);
        return retval;
    }

    void buildheap(vector&lt;int&gt; avector){
        int i = avector.size() / 2;
        this-&gt;currentSize = avector.size();
        this-&gt;heapvector.insert(this-&gt;heapvector.end(), avector.begin(), avector.end());
        while (i &gt; 0){
            this-&gt;percDown(i);
            i = i - 1;
        }
    }

    bool isEmpty(){
        if (this-&gt;heapvector.size()&gt;0){
            return false;
        }
        return true;
    }

    int findMin(){
        return this-&gt;heapvector[1];
    }
};


int main(){
    int arr[] = {9, 5, 6, 2, 3};
    vector&lt;int&gt; a(arr,arr+(sizeof(arr)/ sizeof(arr[0])));

    vector&lt;int&gt; vec;
    vec.push_back(0);

    BinHeap *bh = new BinHeap(vec);
    bh-&gt;buildheap(a);

    cout &lt;&lt; bh-&gt;delMin() &lt;&lt; endl;
    cout &lt;&lt; bh-&gt;delMin() &lt;&lt; endl;
    cout &lt;&lt; bh-&gt;delMin() &lt;&lt; endl;
    cout &lt;&lt; bh-&gt;delMin() &lt;&lt; endl;
    cout &lt;&lt; bh-&gt;delMin() &lt;&lt; endl;

    return 0;
}
        </input>
    </program>
                </TabNode><TabNode tabname="Python" tabnode_options="{'subchapter': 'BinaryHeapImplementation', 'chapter': 'Trees', 'basecourse': 'cppds', 'optional': '', 'optclass': '', 'tabname': 'Python'}">

    <program xml:id="completeheappy" interactive="activecode" language="python">
        <input>
# uses a vector to creat a Binar Heap
class BinHeap:
    """initializes the vector and an attribute currentSize
    as 0 to allow for interger division."""
    def __init__(self):
        self.heapList = [0]
        self.currentSize = 0


    """ prelocates and item as far up in the
    tree as possible to maintain
    the Heap property """
    def percUp(self,i):
        while i // 2 &gt; 0:
            if self.heapList[i] &lt; self.heapList[i // 2]:
                tmp = self.heapList[i // 2]
                self.heapList[i // 2] = self.heapList[i]
                self.heapList[i] = tmp
            i = i // 2

    # appends item to the end of the vector
    def insert(self,k):
        self.heapList.append(k)
        self.currentSize = self.currentSize + 1
        self.percUp(self.currentSize)

    """ prelocates and item as far down in the
    tree as possible to maintain
    the Heap property """
    def percDown(self,i):
        while (i * 2) &lt;= self.currentSize:
            mc = self.minChild(i)
            if self.heapList[i] &gt; self.heapList[mc]:
                tmp = self.heapList[i]
                self.heapList[i] = self.heapList[mc]
                self.heapList[mc] = tmp
            i = mc

    def minChild(self,i):
        if i * 2 + 1 &gt; self.currentSize:
            return i * 2
        else:
            if self.heapList[i*2] &lt; self.heapList[i*2+1]:
                return i * 2
            else:
                return i * 2 + 1

    """ restores full complince with the heap structure
    and heap order properties after the root is removed
    by  taking the last item and moving it to the root position
    and pushing the new root node down the tree to its proper postion."""
    def delMin(self):
        retval = self.heapList[1]
        self.heapList[1] = self.heapList[self.currentSize]
        self.currentSize = self.currentSize - 1
        self.heapList.pop()
        self.percDown(1)
        return retval

    def buildHeap(self,alist):
        i = len(alist) // 2
        self.currentSize = len(alist)
        self.heapList = [0] + alist[:]
        while (i &gt; 0):
            self.percDown(i)
            i = i - 1

def main():

    bh = BinHeap()
    bh.buildHeap([9,5,6,2,3])

    print(bh.delMin())
    print(bh.delMin())
    print(bh.delMin())
    print(bh.delMin())
    print(bh.delMin())

main()
        </input>
    </program>
                </TabNode></exercise>
            <p>The assertion that we can build the heap in <math>O(n)</math> may seem a
                bit mysterious at first, and a proof is beyond the scope of this book.
                However, the key to understanding that you can build the heap in
                <math>O(n)</math> is to remember that the <math>\log{n}</math> factor is
                derived from the height of the tree. For most of the work in
                <c>buildHeap</c>, the tree is shorter than <math>\log{n}</math>.</p>
            <p>Using the fact that you can build a heap from a vector in <math>O(n)</math>
                time, you will construct a sorting algorithm that uses a heap and sorts
                a vector in <math>O(n\log{n}))</math> as an exercise at the end of this
                chapter.</p>

        <exercise>
            <statement>
    <p>Q-3: What is the vector used in the binary tree in the first image of <xref ref="fig-percdown"/>? Exclude any whitespace. <var/>  </p></statement><setup><var><condition string="^\s*0,9,14,11,17,18,19,21,33,27\s*$"><feedback><p>Is the correct answer!</p></feedback></condition><condition string="^\s*.*9,14,11,17,18,19,21,33,27\s*$"><feedback><p>Remember what has to be at the beginning of the vector to accurately traverse through the binary tree. Look back at chp. 8.9.2.</p></feedback></condition><condition string="^\s*.*\s*$"><feedback><p>Refer to section 8.10.1 and 8.10.2</p></feedback></condition></var></setup></exercise>        </subsection>
    </section>

