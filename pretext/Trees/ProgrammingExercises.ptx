<section xml:id="trees_programming-exercises">
        <title>Programming Exercises</title>
        <p><ol label="1">
            <li>
                <p>Extend the <c>buildParseTree</c> function to handle mathematical
                    expressions that do not have spaces between every character.</p>
            </li>
            <li>
                <p>Modify the <c>buildParseTree</c> and <c>evaluate</c> functions to handle
                    boolean statements (and, or, and not). Remember that <q>not</q> is a unary
                    operator, so this will complicate your code somewhat.</p>
            </li>
            <li>
                <p>Using the <c>findSuccessor</c> method, write a non-recursive inorder
                    traversal for a binary search tree.</p>
            </li>
            <li>
                <p>Modify the code for a binary search tree to make it threaded. Write a
                    non-recursive inorder traversal method for the threaded binary search
                    tree. A threaded binary tree maintains a reference from each node to
                    its successor.</p>
            </li>
            <li>
                <p>Modify our implementation of the binary search tree so that it
                    handles duplicate keys properly. That is, if a key is already in the
                    tree then the new payload should replace the old rather than add
                    another node with the same key.</p>
            </li>
            <li>
                <p>Create a binary heap with a limited heap size. In other words, the
                    heap only keeps track of the <c>n</c> most important items. If the heap
                    grows in size to more than <c>n</c> items the least important item is
                    dropped.</p>
            </li>
            <li>
                <p>Clean up the <c>printexp</c> function so that it does not include an
                    &#8216;extra' set of parentheses around each number.</p>
            </li>
            <li>
                <p>Using the <c>buildHeap</c> method, write a sorting function that can
                    sort a array in <m>O(n\log{n})</m> time.</p>
            </li>
            <li>
                <p>Write a function that takes a parse tree for a mathematical
                    expression and calculates the derivative of the expression with
                    respect to some variable.</p>
            </li>
            <li>
                <p>Implement a binary heap as a max heap.</p>
            </li>
            <li>
                <p>Using the <c>BinaryHeap</c> class, implement a new class called
                    <c>PriorityQueue</c>. Your <c>PriorityQueue</c> class should implement the
                    constructor, plus the <c>enqueue</c> and <c>dequeue</c> methods.</p>
            </li>
        </ol></p>
    </section>

